{
  "name": "Github_v1",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message",
          "callback_query"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -6096,
        -3168
      ],
      "id": "10caaeb2-f5c6-4bf6-a35e-9ae4d3ad31c9",
      "name": "Telegram Trigger",
      "webhookId": "8d602bd9-a834-43f5-8524-9ae6172bb0d4",
      "credentials": {
        "telegramApi": {
          "id": "GWiNIWfCwEPeHIOg",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * Unify Telegram message & callback into one shape:\n * { chat_id, text, data, is_callback, username, message_id, _raw }\n */\nconst m = $json.message || {};\nconst c = $json.callback_query || {};\nconst isCb = !!c.data;\n\nconst chat_id = isCb ? c.message.chat.id : (m.chat?.id);\nconst text = (m.text || '').trim();\nconst data = isCb ? c.data : '';\nconst message_id = isCb ? c.message.message_id : (m.message_id || null);\nconst username = (m.from?.username || c.from?.username || '') || '';\n\nreturn [{ json: { chat_id, text, data, is_callback: isCb, message_id, username, _raw: $json } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5872,
        -3168
      ],
      "id": "cb4bc74f-be85-482a-9b2b-908312d897d0",
      "name": "Normalize Event"
    },
    {
      "parameters": {
        "jsCode": "const now = new Date().toISOString();\nreturn [{\n  json: {\n    CustomerId: $json.chat_id,\n    Username: $json.username || '',\n    LastSeenAt: now,\n    FirstSeenAt: now // will only be used on first insert\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5648,
        -3168
      ],
      "id": "c223dc20-fc49-405c-a68e-343f619078ff",
      "name": "Build Customer Upsert"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 415140327,
          "mode": "list",
          "cachedResultName": "Customers",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=415140327"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -5424,
        -3168
      ],
      "id": "ee1182d3-4d62-497f-8849-4381545fa439",
      "name": "GS: Read Customer",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const rows = $items('GS: Read Customer').map(i=>i.json);\nconst id = $items('Normalize Event')[0].json.chat_id;\nconst idx = rows.findIndex(r => String(r.CustomerId) === String(id));\nconst existing = idx >= 0 ? rows[idx] : null;\nreturn [{ json: { exists: !!existing, rowIndex: idx+2 /* +2 for header+1-based */, existing } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5200,
        -3168
      ],
      "id": "7cf7f2b0-d704-4183-ba9d-141d1f1011ec",
      "name": "Find Customer Row"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "701f1773-ee81-4561-97bb-199934d7a86c",
              "leftValue": "={{ $json.exists }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4976,
        -3168
      ],
      "id": "2c5caca5-379c-4572-82e6-ffdcd9863690",
      "name": "IF Customer Exists?"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 415140327,
          "mode": "list",
          "cachedResultName": "Customers",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=415140327"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "CustomerId": "={{$items('Normalize Event')[0].json.chat_id}}",
            "Username": "={{$items('Normalize Event')[0].json.username}}",
            "LastSeenAt": "={{$now}}"
          },
          "matchingColumns": [
            "CustomerId"
          ],
          "schema": [
            {
              "id": "CustomerId",
              "displayName": "CustomerId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Username",
              "displayName": "Username",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FirstSeenAt",
              "displayName": "FirstSeenAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastSeenAt",
              "displayName": "LastSeenAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OrdersCount",
              "displayName": "OrdersCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OptInMarketing",
              "displayName": "OptInMarketing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ConsentTimestamp",
              "displayName": "ConsentTimestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ConsentSource",
              "displayName": "ConsentSource",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -4752,
        -3264
      ],
      "id": "ab057bee-65e8-4afb-afa3-12dd82f40a75",
      "name": "Update Customer",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 415140327,
          "mode": "list",
          "cachedResultName": "Customers",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=415140327"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "CustomerId": "={{$items('Normalize Event')[0].json.chat_id}}",
            "Username": "={{$items('Normalize Event')[0].json.username}}",
            "FirstSeenAt": "={{$now}}",
            "LastSeenAt": "={{$now}}",
            "OrdersCount": "0",
            "OptInMarketing": "FALSE"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "CustomerId",
              "displayName": "CustomerId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Username",
              "displayName": "Username",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "FirstSeenAt",
              "displayName": "FirstSeenAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastSeenAt",
              "displayName": "LastSeenAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OrdersCount",
              "displayName": "OrdersCount",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OptInMarketing",
              "displayName": "OptInMarketing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ConsentTimestamp",
              "displayName": "ConsentTimestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ConsentSource",
              "displayName": "ConsentSource",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -4752,
        -3072
      ],
      "id": "b3b72f9f-0484-49de-b4e5-61c745346ccb",
      "name": "Append Customer",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -5648,
        -3456
      ],
      "id": "c72fa015-b7d6-46ea-a55d-2986889eeb75",
      "name": "GS: Read State",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const rows = $items('GS: Read State').map(i=>i.json);\nconst chat_id = $items('Normalize Event')[0].json.chat_id;\nconst idx = rows.findIndex(r => String(r.chat_id) === String(chat_id));\nconst exists = idx >= 0;\nconst rowIndex = idx+2; // header + 1-based\nreturn [{ json: { chat_id, exists, rowIndex } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5200,
        -3456
      ],
      "id": "7d124400-3021-49c4-814a-f1078e3df028",
      "name": "Find/Init State"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "701f1773-ee81-4561-97bb-199934d7a86c",
              "leftValue": "={{ $json.exists }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4976,
        -3456
      ],
      "id": "29ade1cc-a313-43b9-baba-4857208942bc",
      "name": "IF State Exists?"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chat_id": "={{$items('Normalize Event')[0].json.chat_id}}",
            "UpdatedAt": "={{$now}}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CartFrozen",
              "displayName": "CartFrozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -4528,
        -3456
      ],
      "id": "d2f5cc1b-c59b-438d-ac87-e80b9935fe81",
      "name": "Append State",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse Callback — robust\n// - Supports \"ADD|SKU\" and \"KIND|ACTION|SKU\"\n// - Harvests callback query id (cqid) from multiple shapes including _raw\n\nconst u    = $json;\nconst raw  = u._raw ?? u;  // your Normalize Event keeps the original payload here\nconst cb   = raw.callback_query || raw.callbackQuery || raw.callback || null;\nconst msg  = cb?.message ?? raw.message ?? u.message ?? u;\n\n// Sender / chat\nconst from = cb?.from ?? msg?.from ?? {};\nconst chat = msg?.chat ?? {};\n\n// Base fields\nconst chat_id   = String(chat.id ?? u.chat_id ?? from.id ?? '');\nconst username  = (from.username ?? u.username ?? '') || '';\nconst text      = (u.text ?? msg?.text ?? '').trim();\n\n// Callback payload + ID\nconst data = (u.data ?? cb?.data ?? raw.callback_data ?? '').trim();\n\n// Callback query id (various shapes)\nconst cqid =\n  u.cqid ??\n  u.query_id ??\n  u.callback_query_id ??\n  raw?.query_id ??\n  raw?.callback_query_id ??\n  cb?.id ??\n  null;\n\nconst message_id = Number(msg?.message_id ?? u.message_id ?? 0) || 0;\n\n// Parse action/sku\nlet kind   = '';\nlet action = '';\nlet sku    = '';\n\n// ✅ NEW: mark plain text messages explicitly as 'text'\nif (!data && text) {\n  kind = 'text';\n}\n\nif (data) {\n  const parts = data.split('|');\n  if (parts.length >= 3) {\n    [kind, action, sku] = parts;        // KIND|ACTION|SKU\n  } else if (parts.length === 2) {\n    [action, sku] = parts;               // ACTION|SKU\n    kind = 'BTN';\n  } else {\n    kind = 'BTN';\n    action = parts[0] || '';\n  }\n}\n\n// Optional passthroughs\nconst page = u.page ?? null;\nconst arg  = u.arg  ?? null;\n\n// Mark as callback if we have an id OR callback data\nconst is_callback = Boolean(cqid || data);\n\nreturn [{\n  json: {\n    chat_id, username, text, data,\n    kind, action, sku, page, arg,\n    message_id, cqid, is_callback\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5648,
        -2976
      ],
      "id": "7dd142f5-917c-4085-bd95-1433df052ab3",
      "name": "Parse Callback"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.text}}",
                    "rightValue": "/menu",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    },
                    "id": "c0520939-e2c4-49f7-a982-659c58d5d237"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "menu_page"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cf4e7f80-3c66-435a-992e-77c5ca75120c",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "MENU|REFRESH",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "menu_refresh"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cd1d5dc8-eb16-4b33-8bf8-66d786afc36b",
                    "leftValue": "={{$json.kind}}",
                    "rightValue": "text",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ed074831-baf8-4b8c-ad34-fc7d71ed2b32",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "ADD|",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "add"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3576c5d6-25bd-4750-a388-1be24d6a9a2e",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "CART|VIEW",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "view"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "572e44a3-ee45-4e99-9031-6f45dbec0a5c",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "CART|CLEAR",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "clear"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b3b45c2a-e899-493c-8680-4ec30f4c4996",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "CART|CHECKOUT",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "cart_checkout"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "dbcb4cec-8143-4f67-9827-ef0ea7182c6e",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "DETAILS|",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "details"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "054353b8-618e-4aa0-a936-49a70372c4d5",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "FULFILL|DELIVERY",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "fulfill_delivery"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "017ff0d1-be80-4eca-8714-9c7d5c9e4068",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "FULFILL|PICKUP",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "fulfill_pickup"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4604fb0e-fc8d-4e71-a431-a4240e2b0fb7",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "ADDR|CHANGE",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "addr_change"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "108389d6-b750-46f0-a63b-174b37b70a0e",
                    "leftValue": "={{ $json.action || ($json.data || '').split('|')[0] }}",
                    "rightValue": "CHECKOUT",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "checkout"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6cdc6605-7d57-42c7-88b9-f0c8407e8519",
                    "leftValue": "={{ $json.action || ($json.data || '').split('|')[0] }}",
                    "rightValue": "PAY",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "pay_instr"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1d2f7344-ace6-41ee-a8c6-cb2d084b6264",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "MENU|OPEN",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "menu_open"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "30b77c40-825e-4e70-a8eb-5eafc83c59e4",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "RESET|START",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "reset_start"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "88edfc07-5b3c-4724-b4cc-8bd46eaf9b18",
                    "leftValue": "={{$json.data}}",
                    "rightValue": "HELP|AGENT",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "help_agent"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2704,
        -2848
      ],
      "id": "a15564b7-6f30-41a5-aad4-6ab14e94047c",
      "name": "Action Router"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Menu",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1904,
        -3552
      ],
      "id": "1950340e-2141-4e8e-b712-5c4d196d498b",
      "name": "GS: Read Menu",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * Build Menu Reply (robust, no hard node refs)\n * - Uses $input for rows (from GS: Read Menu)\n * - Safely reads context from Parse Callback (and optionally Default Menu Page)\n * - Item row + separate ℹ️ row\n */\n\nconst PAGE_SIZE = 6;\nconst CURRENCY = '₵';\nconst HEADER = '🍽️ *Today’s Menu*';\nconst MAX_LABEL_CHARS = 40;\n\nconst clean = v => (v ?? '').toString().trim();\nconst isTrue = v => {\n  const s = clean(v).toLowerCase();\n  return s === 'true' || s === '1' || v === true || v === 1;\n};\nconst priceFmt = v => {\n  const n = parseFloat(v);\n  return Number.isFinite(n) ? `${CURRENCY}${n.toFixed(2)}` : `${v}`;\n};\nconst trimLabel = (s, n=MAX_LABEL_CHARS) => {\n  const t = clean(s);\n  return t.length > n ? t.slice(0, n - 1) + '…' : t;\n};\n\n// --- SAFE helper to fetch from a named node if it ran ---\nfunction fromNode(name) {\n  try {\n    const a = $items(name);\n    if (Array.isArray(a) && a.length) return a[0].json;\n  } catch (e) {}\n  return undefined;\n}\n\n// Prefer Parse Callback (always runs), else Default Menu Page, else current $json\nconst ctx = fromNode('Parse Callback') || fromNode('Default Menu Page') || $json;\n\nconst chat_id =\n  ctx?.chat_id ??\n  ctx?.message?.chat?.id ??\n  ctx?.callback_query?.message?.chat?.id;\n\nif (!chat_id) throw new Error('Build Menu Reply: no chat_id found.');\n\nlet page = Math.max(1, Number(ctx?.page || 1));\n\n// Rows come from the previous node (GS: Read Menu) via $input\nconst rows = $input.all().map(i => i.json);\n\n// Filter available\nconst available = rows.filter(r => {\n  if ('Active' in r) return isTrue(r.Active);\n  if ('Available' in r) return isTrue(r.Available);\n  return true;\n});\n\n// Dedupe by SKU\nconst seen = new Set();\nconst unique = [];\nfor (const r of available) {\n  const key = clean(r.SKU) || `${clean(r.Dish)}|${clean(r.Price)}`;\n  if (!seen.has(key)) { seen.add(key); unique.push(r); }\n}\n\n// Group by Category\nconst groups = {};\nfor (const r of unique) {\n  const cat = clean(r.Category) || 'Menu';\n  (groups[cat] ||= []).push(r);\n}\nObject.values(groups).forEach(list => list.sort((a,b) => clean(a.Dish).localeCompare(clean(b.Dish))));\nconst catNames = Object.keys(groups).sort((a,b)=>a.localeCompare(b));\n\nif (!catNames.length) {\n  return [{\n    json: {\n      chat_id,\n      text: `${HEADER}\\n\\n_No dishes available right now. Please check back later._`,\n      parse_mode: 'Markdown',\n      reply_markup: { inline_keyboard: [\n        [{ text: '🔄 Refresh', callback_data: 'MENU|REFRESH' }],\n        [\n          { text: '🧺 View Cart',  callback_data: 'CART|VIEW' },\n          { text: '✅ Checkout',   callback_data: 'CART|CHECKOUT' },\n          { text: '🧹 Clear',      callback_data: 'CART|CLEAR' }\n        ]\n      ]}\n    }\n  }];\n}\n\n// Flatten & paginate\nconst flat = [];\nfor (const cat of catNames) {\n  for (const r of groups[cat]) {\n    const base = `${clean(r.Emoji) ? clean(r.Emoji) + ' ' : ''}${clean(r.Dish) || clean(r.ButtonLabel) || clean(r.SKU)}`;\n    flat.push({\n      sku: clean(r.SKU) || `${clean(r.Dish)}|${clean(r.Price)}`,\n      cat,\n      itemBtn: `${trimLabel(base)} — ${priceFmt(r.Price)}`,\n      bodyLine: `• ${base} — ${priceFmt(r.Price)}`\n    });\n  }\n}\n\nconst totalItems = flat.length;\nconst totalPages = Math.max(1, Math.ceil(totalItems / PAGE_SIZE));\npage = Math.min(Math.max(1, page), totalPages);\nconst start = (page - 1) * PAGE_SIZE;\nconst pageItems = flat.slice(start, start + PAGE_SIZE);\n\n// Message body\nlet text = `${HEADER}\\n\\n`;\nlet lastCat = null;\nfor (const it of pageItems) {\n  if (it.cat !== lastCat) { text += `*${it.cat}*\\n`; lastCat = it.cat; }\n  text += it.bodyLine + '\\n';\n}\ntext += `\\n_Page ${page} of ${totalPages}_\\n_Tap an item to add to cart_`;\n\n// Keyboard: full item row + a separate ℹ️ row\nconst kb = [];\nfor (const it of pageItems) {\n  kb.push([{ text: it.itemBtn, callback_data: `ADD|${it.sku}` }]);\n  kb.push([{ text: 'ℹ️',       callback_data: `DETAILS|${it.sku}` }]);\n}\n\n// Nav + utilities\nconst nav = [];\nif (page > 1) nav.push({ text: '⬅️ Prev', callback_data: `MENU|PAGE|${page - 1}` });\nnav.push({ text: '🔄 Refresh', callback_data: 'MENU|REFRESH' });\nif (page < totalPages) nav.push({ text: 'Next ➡️', callback_data: `MENU|PAGE|${page + 1}` });\nkb.push(nav);\nkb.push([\n  { text: '🧺 View Cart',  callback_data: 'CART|VIEW' },\n  { text: '✅ Checkout',   callback_data: 'CART|CHECKOUT' },\n  { text: '🧹 Clear',      callback_data: 'CART|CLEAR' }\n]);\n\nreturn [{\n  json: { chat_id, text, parse_mode: 'Markdown', reply_markup: { inline_keyboard: kb } }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1680,
        -3552
      ],
      "id": "8151156d-a05d-4743-9095-a0d0b298739d",
      "name": "Build Menu Reply"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{$env.TG_API_BASE || 'https://api.telegram.org'}}/bot{{$env.TG_BOT_TOKEN}}/sendMessage",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.payload || $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1456,
        -3552
      ],
      "id": "0bf4ba79-8087-4a0b-af45-f52f04ab5ad2",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "return [{ json: { chat_id: $json.chat_id, page: 1 }}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2128,
        -3600
      ],
      "id": "e8437e28-8cf9-4e71-9223-a89bb458e924",
      "name": "Default Menu Page"
    },
    {
      "parameters": {
        "jsCode": "// Build Dish Details — sendPhoto (preferred) or sendMessage (fallback)\nconst CURRENCY = '₵';\n\n// Pull sku/chat_id from Parse Callback (fallback to current)\nconst parse = $items('Parse Callback')[0]?.json || $json;\nconst sku = parse.sku || $json.sku;\nconst chat_id = parse.chat_id || $json.chat_id;\n\n// Rows from GS: Read Menu(details) right before this node\nconst rows = $input.all().map(i => i.json);\nconst row = rows.find(r => String(r.SKU) === String(sku));\n\nif (!row) {\n  return [{\n    json: {\n      __endpoint: 'sendMessage',\n      payload: { chat_id, text: 'Item not found.' }\n    }\n  }];\n}\n\n// minimal Markdown escape for Telegram legacy Markdown\nconst esc = s => (s ?? '').toString().replace(/([_*[\\]()~`>#+\\-=|{}.!\\\\])/g, '\\\\$1');\n\nconst price = Number(row.Price) || 0;\nconst dish = `${esc(row.Emoji || '')} ${esc(row.Dish)} — ${CURRENCY}${price}`;\nconst notes = row.Notes ? `\\n_${esc(row.Notes)}_` : '';\n\nconst caption = `*${dish}*${notes}`;\n\n// Inline keyboard: Add + Back\nconst kb = {\n  inline_keyboard: [\n    [{ text: `➕ Add ${esc(row.Dish)}`, callback_data: `ADD|${sku}` }],\n    [{ text: '⬅️ Back', callback_data: 'MENU|REFRESH' }]\n  ]\n};\n\nif (row.PhotoURL) {\n  return [{\n    json: {\n      __endpoint: 'sendPhoto',\n      payload: {\n        chat_id,\n        photo: row.PhotoURL,\n        caption,\n        parse_mode: 'Markdown',\n        reply_markup: kb\n      }\n    }\n  }];\n}\n\n// Fallback without photo\nreturn [{\n  json: {\n    __endpoint: 'sendMessage',\n    payload: {\n      chat_id,\n      text: caption,\n      parse_mode: 'Markdown',\n      reply_markup: kb\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1904,
        -2320
      ],
      "id": "16de7b17-7888-4205-99fd-b29bc24ba1c2",
      "name": "Build Dish Details"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Menu",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2128,
        -2320
      ],
      "id": "eca1345d-245d-463d-bcbc-2d06279f2734",
      "name": "GS: Read Menu(details)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{$env.TG_TOKEN}}/{{ $json.endpoint || $json.method || 'sendMessage' }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json.payload}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1680,
        -2320
      ],
      "id": "617a8708-3768-4fc8-a5e4-cab4bcfd8ce1",
      "name": "HTTP Request (details)"
    },
    {
      "parameters": {
        "jsCode": "// Pick Menu Item (by SKU)\n// Mode: Run once for all items\n\n// All menu rows from GS: Read Menu\nconst menu = $input.all().map(i => i.json);\n\n// SKU the user actually tapped\nconst cb = ($items('Parse Callback')?.[0]?.json) || {};\nconst chat_id = String(cb.chat_id || '');\nconst wanted = String(cb.sku || '').trim().toUpperCase();\nif (!chat_id || !wanted) return []; // nothing to do\n\n// Find the matching row in the menu\nconst row = menu.find(r =>\n  String(r.SKU || '').trim().toUpperCase() === wanted\n);\nif (!row) return []; // SKU not in menu\n\nconst price = Number(row.Price || 0);\nconst dish  = row.Dish ?? row.ButtonLabel ?? wanted;\n\n// Emit exactly one new cart line\nreturn [{\n  json: {\n    chat_id,\n    LineId: `${chat_id}|${wanted}`,\n    SKU: wanted,\n    Dish: dish,\n    Price: price,\n    Quantity: 1,\n    LineTotal: price,\n    Frozen: '',\n    CurrentStep: '',\n    PaymentStatus: '',\n    OrderNumber: '',\n    OrderUID: ''\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1872,
        -2896
      ],
      "id": "95ea6571-d679-4a45-b1f1-877c38dd58d4",
      "name": "Pick Menu Item (by SKU)"
    },
    {
      "parameters": {
        "jsCode": "// Input: the single “picked menu item by SKU” (current add) is $json\n// Read all cart rows from the previous GS: Read Cart (add)\nconst rows = $items('GS: Read Cart (add)').map(i => i.json);\n\nconst chatId = String($json.chat_id);\nconst sku    = String($json.SKU);\n\n// “Open” = NOT frozen, NOT paid, NO order number\nconst isOpen = r =>\n  String(r.chat_id) === chatId &&\n  String(r.SKU)     === sku &&\n  !String(r.Frozen ?? '').toLowerCase().startsWith('t') &&\n  !String(r.PaymentStatus ?? '').toUpperCase().includes('PAID') &&\n  !String(r.OrderNumber ?? '').trim();\n\nconst open = rows.filter(isOpen);\n\n// If we have an existing open row, keep its row_number to update.\n// (If you want newest, sort by Timestamp and take last)\nif (open.length) {\n  const keep = open[open.length - 1];\n  return [{\n    json: {\n      ...keep,\n      exists: true,\n      keep_row_number: keep.row_number   // <-- we’ll match updates on this\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    exists: false,\n    chat_id: chatId,\n    SKU: sku,\n    // Carry through what your downstream nodes need\n    Dish: $json.Dish,\n    Price: $json.Price,\n    Quantity: 1,\n    LineTotal: Number($json.Price || 0)\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1520,
        -3120
      ],
      "id": "88e76d55-07b0-44bd-8be7-673fd7c435a6",
      "name": "Find Existing Cart Line"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "701f1773-ee81-4561-97bb-199934d7a86c",
              "leftValue": "={{$json.exists === true && $json.keep_row_number && $json.keep_row_number > 0}}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1040,
        -3024
      ],
      "id": "09b397fc-b394-4cdf-a79e-1097b413fe21",
      "name": "IF Exists?"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Timestamp": "={{$now}}",
            "Quantity": "={{$json.Quantity}}",
            "LineTotal": "={{$json.LineTotal}}",
            "row_number": "={{$json.keep_row_number}}"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "Timestamp",
              "displayName": "Timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "LineId",
              "displayName": "LineId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "SKU",
              "displayName": "SKU",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Dish",
              "displayName": "Dish",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Price",
              "displayName": "Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Quantity",
              "displayName": "Quantity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineTotal",
              "displayName": "LineTotal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OrderNumber",
              "displayName": "OrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Frozen",
              "displayName": "Frozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Deleted",
              "displayName": "Deleted",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "OrderUID",
              "displayName": "OrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -528,
        -3392
      ],
      "id": "eb65f4f8-8dbc-48c1-8fa3-b256c0b96dc5",
      "name": "GS: Update Cart Line",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Timestamp": "={{$now}}",
            "chat_id": "={{$json.chat_id}}",
            "LineId": "={{$json.chat_id}}|{{$json.SKU}}",
            "SKU": "={{$json.SKU}}",
            "Dish": "={{$json.Dish}}",
            "Price": "={{$json.Price}}",
            "Quantity": "={{Number($json.Quantity) || 1}}",
            "LineTotal": "={{ (Number($json.Quantity) || 1) * (Number($json.Price) || 0) }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Timestamp",
              "displayName": "Timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineId",
              "displayName": "LineId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "SKU",
              "displayName": "SKU",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Dish",
              "displayName": "Dish",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Price",
              "displayName": "Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Quantity",
              "displayName": "Quantity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineTotal",
              "displayName": "LineTotal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OrderNumber",
              "displayName": "OrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Frozen",
              "displayName": "Frozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Deleted",
              "displayName": "Deleted",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "OrderUID",
              "displayName": "OrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -800,
        -2992
      ],
      "id": "18eff6d0-8d9d-400c-9755-ab6c25660933",
      "name": "GS: Append Cart Line",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// n8n Code node: Build Cart Summary (old callbacks, new formatting)\n// - Keeps your original callbacks: CART|CHECKOUT, CART|CLEAR, MENU|OPEN\n// - Same cart filtering (this user only, qty>0, not frozen, not PAID)\n// - Just improves the *formatting* to match the screenshot style\n//   • Dish xQty — ₵PriceEach\n//   Fulfillment hint + Subtotal, Delivery fee, Total\n// - No Telegram code block (so no red background / “<>”)\n\n// ---------- helpers ----------\nconst NBSP = '\\u00A0';\nconst WIDTH = 44;                      // adjust 38–50 to tune bubble width\nconst money = v => `₵${Number(v || 0).toFixed(2)}`;\nconst asInt = (v, d = 0) => {\n  const n = Number(v);\n  return Number.isFinite(n) ? n : d;\n};\nconst asNum = (v, d = 0) => {\n  const n = Number(v);\n  return Number.isFinite(n) ? n : d;\n};\n// visible length (strip simple Markdown markers)\nconst visLen = s => String(s).replace(/\\*|_/g, '').length;\nconst padTail = s => s + NBSP.repeat(Math.max(0, WIDTH - visLen(s)));\n\n// ---------- context ----------\nconst ctxItem = $items('Parse Callback')?.[0]?.json ?? {};\nconst chat_id = String(ctxItem.chat_id ?? $json.chat_id ?? '');\nif (!chat_id) {\n  return [{\n    json: { method: 'noop', payload: { reason: 'missing chat_id in Build Cart Summary' } }\n  }];\n}\n\n// ---------- source rows ----------\nconst allRows = $input.all().map(i => i.json);\n\n// Only active, unpaid, unfrozen rows for this user with qty > 0\nconst rows = allRows.filter(r => {\n  if (!r || !r.SKU) return false;\n  if (String(r.chat_id ?? '') !== chat_id) return false;\n  const qty = asInt(r.Quantity, 0);\n  if (qty <= 0) return false;\n  const fr = String(r.Frozen ?? '').trim().toLowerCase();\n  if (fr === 'true' || fr === '1' || fr === 'yes') return false;\n  if (String(r.PaymentStatus ?? '').trim().toUpperCase() === 'PAID') return false;\n  return true;\n});\n\n// ---------- empty state ----------\nif (rows.length === 0) {\n  const text = [\n    '🧺 *Your Cart*',\n    '',\n    '_Your cart is empty._',\n    '',\n    'Tap *View Menu* to add items.'\n  ].join('\\n');\n\n  const keyboard = [\n    [{ text: '📖 View Menu', callback_data: 'MENU|OPEN' }]\n  ];\n\n  return [{\n    json: {\n      method: 'sendMessage',\n      payload: {\n        chat_id,\n        text,\n        parse_mode: 'Markdown',\n        reply_markup: { inline_keyboard: keyboard }\n      }\n    }\n  }];\n}\n\n// ---------- build (formatting only) ----------\nlet subtotal = 0;\n\nconst itemLines = rows.map(r => {\n  const dish  = String(r.Dish ?? r.SKU ?? '—');\n  const qty   = asInt(r.Quantity, 0);\n  const price = asNum(r.Price, 0);          // per-item price (as in screenshot)\n  subtotal += qty * price;\n\n  // • Waakye Set x1 — ₵65.00\n  return padTail(`• ${dish} x${qty} — ${money(price)}`);\n});\n\nconst deliveryFee = 0;                       // cart view shows 0.00; checkout will compute later\nconst total = subtotal + deliveryFee;\n\n// ---------- keyboard (unchanged: your old callbacks) ----------\nconst keyboard = [\n  [{ text: '🧾 Checkout', callback_data: 'CART|CHECKOUT' }],\n  [\n    { text: '🧹 Clear cart', callback_data: 'CART|CLEAR' },\n    { text: '📖 View Menu',  callback_data: 'MENU|OPEN'  }\n  ]\n];\n\n// ---------- final text ----------\nconst text = [\n  padTail('🧺 *Your Cart*'),\n  '',\n  ...itemLines,\n  '',\n    '',\n  padTail(`*Subtotal:* ${money(subtotal)}`),\n  padTail(`*Delivery fee:* ${money(deliveryFee)}`),\n  padTail(`*Total:* ${money(total)}`)\n].join('\\n');\n\n// ---------- emit ----------\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text,\n      parse_mode: 'Markdown',\n      reply_markup: { inline_keyboard: keyboard }\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1904,
        -2688
      ],
      "id": "d2f1c275-d2de-4482-92f1-98ac37c24a49",
      "name": "Build Cart Summary"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{$env.TG_BOT_TOKEN}}/{{$json.method}}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json.payload}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1680,
        -2704
      ],
      "id": "6902b2a6-47e8-4a2d-aea5-c89f10dbed8a",
      "name": "Send Cart"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2128,
        -2704
      ],
      "id": "e0e8972b-6519-4364-b2db-a73218b986b1",
      "name": "GS: Read Cart (view)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2128,
        -2512
      ],
      "id": "04c67092-a2d7-4308-89ff-e071113090a5",
      "name": "GS: Read Cart (clear)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Collect Rows To Delete — delete ONLY unpaid & unfrozen lines for this user\n\nconst ctx = $items('Parse Callback')?.[0]?.json ?? {};\nconst chat_id = String(ctx.chat_id ?? $json.chat_id ?? '');\n\nconst rows = $input.all().map(i => i.json).filter(r => String(r.chat_id ?? '') === chat_id);\n\n// helpers\nfunction isPaid(v) {\n  const s = String(v ?? '').trim().toLowerCase();\n  // allow common synonyms/flags\n  return ['paid','success','successful','confirmed','complete','completed','true','yes','1'].includes(s);\n}\nfunction isTrue(v) {\n  const s = String(v ?? '').trim().toLowerCase();\n  return ['true','1','yes'].includes(s);\n}\n\n// keep only rows we should delete: NOT paid and NOT frozen\nconst toDelete = rows\n  .filter(r => !isPaid(r.PaymentStatus) && !isTrue(r.Frozen))\n  .map(r => Number(r.row_number))\n  .filter(n => Number.isFinite(n))\n  // delete bottom-up to avoid row-shift\n  .sort((a, b) => b - a);\n\nif (toDelete.length === 0) {\n  // Signal \"nothing to delete\" to your IF node\n  return [{ json: { chat_id, none: true } }];\n}\n\n// emit one item per row_number\nreturn toDelete.map(n => ({ json: { chat_id, row_number: n } }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1904,
        -2512
      ],
      "id": "54ed5d44-0e9d-4da3-9981-132e68254109",
      "name": "Collect Rows To Delete"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "067a2f22-6c78-475a-8d22-e687b686da63",
              "leftValue": "={{$json.none}}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1680,
        -2512
      ],
      "id": "c52a3352-2bc3-43dc-a385-ed6945ca2423",
      "name": "IF Nothing To Delete?"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1456,
        -2368
      ],
      "id": "3aa30084-09ce-424d-8108-3ec2633a0e5f",
      "name": "Split In Batches (1)"
    },
    {
      "parameters": {
        "operation": "delete",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "startIndex": "={{$json.row_number}}"
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1232,
        -2272
      ],
      "id": "4f813c69-695e-441e-b1ae-e41bb92766f8",
      "name": "GS: Delete Row",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"chat_id\": {{$items('Parse Callback')[0].json.chat_id}},\n  \"parse_mode\": \"Markdown\",\n  \"text\": \"🧹 Cart cleared\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\",\n  \"reply_markup\": {\n    \"inline_keyboard\": [\n      [{ \"text\": \"🍽️ Back to Menu\", \"callback_data\": \"MENU|REFRESH\" }],\n      [{ \"text\": \"🧺 View Cart\",     \"callback_data\": \"CART|VIEW\" }]\n    ]\n  }\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1008,
        -2592
      ],
      "id": "42cdd661-524f-4050-b5a7-22b5e318bad3",
      "name": "Send Cleared"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "chat_id",
              "lookupValue": "={{$items('Parse Callback')[0].json.chat_id}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1952,
        -3104
      ],
      "id": "7a0362ae-cff6-4770-82b8-5c08e086a207",
      "name": "GS: Read Cart (add)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Menu",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2064,
        -2896
      ],
      "id": "936bfcb6-594e-401c-96d7-51ce0ec546da",
      "name": "GS: Read Menu (add)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "77a6c16e-5c82-4617-a7f6-49cc97372bfd",
              "leftValue": "={{ Array.isArray($json.dupes) && $json.dupes.length > 0 }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -592,
        -3088
      ],
      "id": "bcae260b-7ff7-4d3f-b8e1-cb14dc7c8dea",
      "name": "IF Has Dupes?"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -144,
        -3088
      ],
      "id": "4b29fd5f-40f0-42a7-abfd-13a9a2011080",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "resource": "callback",
        "queryId": "={{$json.cqid}}",
        "additionalFields": {
          "cache_time": 0,
          "show_alert": false,
          "text": "=✅ Added to cart"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -1904,
        -3280
      ],
      "id": "2cfbd15e-2451-4110-9ef0-c3632813d5f4",
      "name": "Ack Added",
      "webhookId": "7d1995d5-c384-454f-adbd-f12db4deea2f",
      "credentials": {
        "telegramApi": {
          "id": "GWiNIWfCwEPeHIOg",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Fan out dupes array to items with row_number\nconst chat_id = $json.chat_id;\nconst dupes = Array.isArray($json.dupes) ? $json.dupes : [];\nif (!dupes.length) return [];\nreturn dupes.map(n => ({ json: { chat_id, row_number: Number(n) } }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -368,
        -3088
      ],
      "id": "636e6058-ff52-4d8d-922c-ba92e94661c1",
      "name": "Make Dupe Items"
    },
    {
      "parameters": {
        "operation": "delete",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "startIndex": "={{$json.row_number}}\n"
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        80,
        -3088
      ],
      "id": "4fb8112e-bf63-4de5-9d89-264e6d09a4c8",
      "name": "GS: Delete Row (Row Number = {{$json.row_number}})",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Collapse to exactly one item after the loop (or when nothing to delete)\nreturn [{ json: { chat_id: $items('Parse Callback')[0].json.chat_id } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1232,
        -2592
      ],
      "id": "48c3cfb2-698e-4c9f-8e39-e0b788471bab",
      "name": "Carry Chat (clear)"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Build Checkout Summary (Delivery/Pickup aware)\n * Input: items from \"Attach State → Lines (checkout)\" (cart lines with state fields attached)\n * Output: { method, payload } for Telegram\n */\n\nconst CURRENCY = '₵';\nconst WIDTH = 40;\nconst NBSP = '\\u00A0';\n\nconst money  = n => `${CURRENCY}${(Number(n)||0).toFixed(2)}`;\nconst visLen = s => s.replace(/\\*|_/g,'').length;\nconst pad    = s => s + NBSP.repeat(Math.max(0, WIDTH - visLen(s)));\n\nconst rows = $input.all().map(i => i.json);\n\n// Robust chat_id\nconst chat_id = String(\n  rows[0]?.chat_id ?? rows[0]?.ChatID ?? $json._chat_id ?? $json.chat_id ?? ''\n);\n\nif (!rows.length || !chat_id) {\n  return [{\n    json: {\n      method: 'sendMessage',\n      payload: {\n        chat_id,\n        text: '🧺 Your cart is empty.\\n\\nTap *Menu* to add items.',\n        parse_mode: 'Markdown',\n        reply_markup: { inline_keyboard: [[{ text: '🍽️ Back to Menu', callback_data: 'MENU|REFRESH' }]] }\n      }\n    }\n  }];\n}\n\n// State context (now present on each line)\nconst fulfillmentRaw = String(rows[0]?.Fulfillment || '').toLowerCase().trim();\nconst address  = String(rows[0]?.Address  || '').trim();\nconst zone     = String(rows[0]?.Zone     || '').trim();\nconst phone    = String(rows[0]?.Phone    || '').trim();\nconst feeInput = Number(rows[0]?.DeliveryFee ?? 0);\nconst isPickup   = fulfillmentRaw === 'pickup';\nconst isDelivery = fulfillmentRaw === 'delivery';\nconst fee        = isPickup ? 0 : (Number.isFinite(feeInput) ? feeInput : 0);\n\n// Lines\nconst header = pad('🧺 *Your Cart*');\nconst lines = rows.map(r => {\n  const qty   = Number(r.Quantity ?? r.qty ?? 1) || 1;\n  const price = Number(r.Price ?? r.price ?? 0)  || 0;\n  const name  = String(r.Dish ?? r.name ?? r.SKU ?? '').trim();\n  return pad(`• ${name} x${qty} — ${money(price)}`);\n});\n\nconst subtotal = rows.reduce((s, r) => {\n  const lt = Number(r.LineTotal ?? r.line_total);\n  if (Number.isFinite(lt) && lt > 0) return s + lt;\n  const q = Number(r.Quantity ?? r.qty ?? 1) || 1;\n  const p = Number(r.Price ?? r.price ?? 0)  || 0;\n  return s + q * p;\n}, 0);\n\nconst fulfillmentLine = isPickup\n  ? '🏪 Pickup at counter'\n  : (isDelivery\n     ? `🚚 Delivery${address ? ` to: ${address}` : ''}${zone ? ` (Zone: ${zone})` : ''}`\n     : '— choose delivery or pickup below —');\n\nconst meta = [\n  pad(`*Fulfillment:* ${fulfillmentLine}`),\n  phone ? pad(`*Phone:* ${phone}`) : null\n].filter(Boolean);\n\nconst foot = [\n  pad(`*Subtotal:* ${money(subtotal)}`),\n  pad(`*Delivery fee:* ${money(fee)}`),\n  pad(`*Total:* ${money(subtotal + fee)}`)\n];\n\nconst text = [header, '', ...lines, '', ...meta, '', ...foot].join('\\n');\n\n// Keyboard\nconst baseRows = [\n  [\n    { text: '🧹 Clear', callback_data: 'CART|CLEAR' },\n    { text: '🍽️ Continue Shopping', callback_data: 'MENU|REFRESH' }\n  ]\n];\n\nlet keyboard;\nif (!isPickup && !isDelivery) {\n  keyboard = [\n    [\n      { text: '🚚 Delivery', callback_data: 'FULFILL|DELIVERY' },\n      { text: '🏪 Pickup',   callback_data: 'FULFILL|PICKUP' }\n    ],\n    ...baseRows\n  ];\n} else if (isPickup) {\n  keyboard = [\n    [{ text: '💳 Pay now', callback_data: 'PAY' }],\n    [{ text: 'Change to Delivery', callback_data: 'FULFILL|DELIVERY' }],\n    ...baseRows\n  ];\n} else {\n  // delivery\n  if (address) {\n    keyboard = [\n      [{ text: '💳 Pay now', callback_data: 'PAY' }],\n      [{ text: 'Change to Pickup', callback_data: 'FULFILL|PICKUP' }],\n      ...baseRows\n    ];\n  } else {\n    keyboard = [\n      [{ text: '📍 Add address', callback_data: 'ADDR|CHANGE' }],\n      [{ text: 'Change to Pickup', callback_data: 'FULFILL|PICKUP' }],\n      ...baseRows\n    ];\n  }\n}\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text,\n      parse_mode: 'Markdown',\n      reply_markup: { inline_keyboard: keyboard }\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        -4000
      ],
      "id": "66fb3d56-a719-4dd7-9a7b-db720b6c4326",
      "name": "Build Checkout Summary"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -32,
        -3904
      ],
      "id": "7a971bde-3897-41c4-824e-534e34cec643",
      "name": "GS: Read Cart (checkout)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chat_id": "={{$json.chat_id}}",
            "UpdatedAt": "={{$now}}",
            "Fulfillment": "pickup"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CartFrozen",
              "displayName": "CartFrozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1872,
        -1392
      ],
      "id": "17cc2799-24a8-4fbb-bcdf-fedc089b4491",
      "name": "GS: Append State (pickup)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1904,
        -1936
      ],
      "id": "4dfd3464-5f7f-4443-b26d-92ff01642de2",
      "name": "GS: Read State(delivery)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const isCb = Boolean($json.cqid || $json.is_callback || ($json.data && $json.data.includes('|')));\nreturn isCb ? [{ json: $json }] : [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2128,
        -3280
      ],
      "id": "937b0290-8397-47e2-a41b-f2d605464e3d",
      "name": "Ack? (safe)"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "chat_id",
              "lookupValue": "={{ String($items('Normalize Event')[0].json.chat_id) }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2800,
        -4128
      ],
      "id": "ab97dda8-2da6-480b-888e-f81e5a1a8783",
      "name": "GS: Read State (phone)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Needs Phone? — fire ONLY on text messages while awaiting phone\nconst evt = $items('Normalize Event')[0].json;   // has chat_id, text, is_callback\nconst chat_id = String(evt.chat_id || '');\nconst rows = $items().map(i => i.json);          // from GS: Read State (phone)\n\n// 1) Ignore button taps/callbacks entirely\nif (evt.is_callback === true) return [];\n\n// 2) Must be a non-empty text message\nconst text = typeof evt.text === 'string' ? evt.text.trim() : '';\nif (!text) return [];\n\n// 3) Find this user's state row\nconst row = rows.find(r => String(r.chat_id || r.ChatID) === chat_id);\nif (!row) return []; // no state row yet\n\n// 4) Only when we are truly waiting for phone\nconst fulfillment = String(row.Fulfillment || '').toLowerCase();\nconst step        = String(row.CurrentStep || '').toLowerCase();\nconst isPickupOrDelivery = (fulfillment === 'pickup' || fulfillment === 'delivery');\n\nconst needsPhone = isPickupOrDelivery && step === 'await_phone';\n\n// 5) Pass row + the text we just received forward\nreturn needsPhone ? [{\n  json: {\n    ...row,\n    _chat_id: chat_id,\n    _text: text\n  }\n}] : [];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2144,
        -4288
      ],
      "id": "32fc18fc-0bc8-4d0d-8b2b-95af2fc56d49",
      "name": "Needs Phone?"
    },
    {
      "parameters": {
        "jsCode": "// Validate Ghana Phone — preserve incoming fields\nconst chat_id = $json._chat_id || $json.chat_id;\nconst raw = String($json._text || $json.text || '').replace(/\\s+/g, '');\n\nfunction normGhana(n) {\n  if (/^\\+?233\\d{9}$/.test(n)) {\n    const tail = n.replace(/^\\+?233/, '');\n    return { e164: '+233' + tail, local: '0' + tail };\n  }\n  if (/^0\\d{9}$/.test(n)) {\n    return { e164: '+233' + n.slice(1), local: n };\n  }\n  return null;\n}\n\nconst norm = normGhana(raw);\n\nreturn [{\n  json: {\n    ...$json,                  // << keep Fulfillment, CurrentStep, etc.\n    chat_id,\n    valid: !!norm,\n    phone_local: norm?.local || '',\n    phone_e164: norm?.e164 || ''\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1920,
        -4288
      ],
      "id": "7e1da03c-0cc4-4223-a19b-6a930f157d81",
      "name": "Validate Ghana Phone"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0b046203-2730-477f-a9bc-fb6402e4c474",
              "leftValue": "={{$json.valid}}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1696,
        -4288
      ],
      "id": "e4551963-a408-40df-a65d-37aff10f41ec",
      "name": "IF — is phone valid?"
    },
    {
      "parameters": {
        "jsCode": "// Reply: Invalid Phone — do NOT reference other nodes by name\nconst chat_id = $json._chat_id || $json.chat_id;\n\nconst hint =\n  '⚠️ *That phone number looks invalid.*\\n' +\n  'Send something like `0241234567` or `+233241234567`.';\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text: hint,\n      parse_mode: 'Markdown',\n      reply_markup: {\n        inline_keyboard: [\n          [{ text: 'Cancel', callback_data: 'MENU|OPEN' }]\n        ]\n      }\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1472,
        -4176
      ],
      "id": "680b90fd-cac4-4c32-8d89-8115d1c435d5",
      "name": "Reply: Invalid Phone"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.payload }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1248,
        -4176
      ],
      "id": "9e65a5a7-fade-49cd-96ef-d184314ac848",
      "name": "HTTP: Send Invalid"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "row_number": "={{ $items('Needs Phone?')[0].json.row_number }}",
            "Phone": "={{$json.phone_local}}",
            "CurrentStep": "await_addr",
            "UpdatedAt": "={{$now}}",
            "chat_id": "={{ $json.chat_id || $json._chat_id || $items('Normalize Event')[0].json.chat_id }}",
            "Fulfillment": "={{$json.Fulfillment}}"
          },
          "matchingColumns": [
            "chat_id"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CartFrozen",
              "displayName": "CartFrozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1472,
        -4368
      ],
      "id": "4389c1b5-a2cf-4dca-a886-294e85dcc26d",
      "name": "GS: Save Phone",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "row_number": "={{ $items('Needs Phone?')[0].json.row_number }}",
            "CurrentStep": "await_phone",
            "UpdatedAt": "={{$now}}"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1024,
        -4176
      ],
      "id": "64a62fde-eb3d-4e60-b63d-0adc901c2660",
      "name": "GS: Keep Await Phone",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Use chat_id from the current item (coming from GS: Save Phone).\nconst chat_id =\n  $json.chat_id ||\n  $json._chat_id ||                 // fallback if you passed it along earlier\n  $items('Normalize Event')[0]?.json?.chat_id;  // last-resort fallback\n\nconst msg =\n  '✅ *Phone saved.*\\n' +\n  'Now please *type your delivery area / address*.\\n\\n' +\n  'Tip: use an area keyword if possible (e.g., `osu`, `airport`, `taifa`, `achimota`, `east legon`).';\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text: msg,\n      parse_mode: 'Markdown'\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -960,
        -4480
      ],
      "id": "1e87a894-a457-4ae3-9f8f-2e07f31fcde5",
      "name": "Reply: Ask Address"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.payload }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -672,
        -4496
      ],
      "id": "79e81f4d-ff51-4e2f-b57a-37910d5bbab5",
      "name": "HTTP: Send Ask Address"
    },
    {
      "parameters": {
        "jsCode": "// Sets delivery mode and moves user to await_phone.\n// Also clears Zone/Fee (we’ll fill these after address).\nreturn [{\n  json: {\n    chat_id: $json.chat_id,\n    Fulfillment: 'delivery',\n    CurrentStep: 'await_phone',\n    Zone: '',\n    DeliveryFee: '',\n    UpdatedAt: $now\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1232,
        -2080
      ],
      "id": "b3a0776f-9116-4f77-90d5-1a59d6f2f7cd",
      "name": "Set Delivery Context"
    },
    {
      "parameters": {
        "jsCode": "// Try current item first (from After Update), then fall back safely.\nconst chat_id =\n  $json.chat_id ??\n  $items('Set Delivery Context')[0].json.chat_id ??\n  $items('Parse Callback')[0].json.chat_id;\n\nconst text =\n  '📦 *Delivery selected.*\\n' +\n  'Please reply with your *phone number* (e.g., `0241234567` or `+233241234567`).';\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text,\n      parse_mode: 'Markdown',\n      reply_markup: {\n        inline_keyboard: [\n          [{ text: 'Change to Pickup', callback_data: 'FULFILL|PICKUP' }]\n        ]\n      }\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -784,
        -2080
      ],
      "id": "11658e5e-b8bc-49aa-940c-416c8e7f8028",
      "name": "Ask For Phone"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.payload }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -464,
        -1968
      ],
      "id": "29db40a9-1f13-4a09-bb88-383f2772bc79",
      "name": "HTTP: Send Ask Phone"
    },
    {
      "parameters": {
        "jsCode": "const isCb = Boolean($json.cqid || $json.is_callback || ($json.data && $json.data.includes('|')));\nreturn isCb ? [{ json: $json }] : [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2128,
        -1872
      ],
      "id": "b01542c5-a775-426d-861b-d5f4855ccf31",
      "name": "Ack? (safe)1"
    },
    {
      "parameters": {
        "jsCode": "// Has State? — always runs because it receives an item from Ack? (safe)1.\n// It inspects the parallel GS read results to decide whether a row exists.\n\nconst chatId = String(\n  $json.chat_id ??\n  $items('Parse Callback')[0]?.json?.chat_id ?? ''\n);\n\n// Use the exact node name as it appears in your left panel: GS: Read State(delivery)\nconst rows = ($items('GS: Read State(delivery)') || []).map(i => i.json);\nconst hit  = rows.find(r => String(r.chat_id) === chatId) || null;\n\nreturn [{\n  json: {\n    chat_id: chatId,\n    exists: Boolean(hit),\n    row_number: hit?.row_number ?? null\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1680,
        -1872
      ],
      "id": "73c071ef-0f03-49ef-bd0b-b76bba6ff263",
      "name": "Has State?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "98cb4d98-e5ee-4f0d-bffa-da1526253353",
              "leftValue": "={{$json.exists}}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1456,
        -1872
      ],
      "id": "fc14f85e-ffee-4334-94f1-5edd6912d2b0",
      "name": "IF State Exists?3"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chat_id": "={{$json.chat_id}}",
            "UpdatedAt": "={{$json.UpdatedAt}}",
            "CurrentStep": "={{$json.CurrentStep}}",
            "Fulfillment": "={{$json.Fulfillment}}",
            "Zone": "={{$json.Zone}}",
            "DeliveryFee": "={{$json.DeliveryFee}}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CartFrozen",
              "displayName": "CartFrozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1008,
        -1776
      ],
      "id": "2381c2e0-302f-40ce-bc54-556dce056486",
      "name": "GS: Append State (delivery)1",
      "alwaysOutputData": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Try current item first (from After Update), then fall back safely.\nconst chat_id =\n  $json.chat_id ??\n  $items('Set Delivery Context')[0].json.chat_id ??\n  $items('Parse Callback')[0].json.chat_id;\n\nconst text =\n  '📦 *Delivery selected.*\\n' +\n  'Please reply with your *phone number* (e.g., `0241234567` or `+233241234567`).';\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text,\n      parse_mode: 'Markdown',\n      reply_markup: {\n        inline_keyboard: [\n          [{ text: 'Change to Pickup', callback_data: 'FULFILL|PICKUP' }]\n        ]\n      }\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -704,
        -1744
      ],
      "id": "3f3cc7f6-ce50-4c66-836b-357557861e3a",
      "name": "Ask For Phone1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.payload }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -480,
        -1712
      ],
      "id": "e5f10c3d-edfc-4af9-9e2a-6aaa9eb245b5",
      "name": "HTTP: Send Ask Phone1"
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n    chat_id: $json.chat_id,\n    Fulfillment: 'delivery',\n    CurrentStep: 'await_phone',\n    Zone: '',\n    DeliveryFee: '',\n    UpdatedAt: $now\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1232,
        -1776
      ],
      "id": "69f30b51-d279-4de9-a09f-1fca62d4c793",
      "name": "Set Delivery Context (create)"
    },
    {
      "parameters": {
        "jsCode": "/** Fire only on text when the user should provide an address. */\nconst rows = ($items('GS: Read State (phone)') || []).map(i => i.json);\nconst evt  = $items('Normalize Event')[0]?.json || {};\nif (evt.is_callback) return [];\n\nconst chat_id = evt.chat_id;\nconst text    = (evt.text || '').trim();\nif (!text) return [];\n\n// NEW: ignore if message looks like a phone number (0XXXXXXXXX or +233XXXXXXXXX)\nconst digits = text.replace(/\\s+/g, '');\nif (/^(0\\d{9}|\\+?233\\d{9})$/.test(digits)) return [];\n\nconst row = rows.find(r => String(r.chat_id) === String(chat_id));\nif (!row) return [];\n\nconst fulfillment = (row.Fulfillment || '').toLowerCase().trim();\nconst step        = (row.CurrentStep || '').toLowerCase().trim();\n\nconst needsAddr = (fulfillment === 'delivery') && (step === 'await_addr');\nreturn needsAddr ? [{ json: { chat_id, address_text: text } }] : [];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2144,
        -3920
      ],
      "id": "636ef24f-1d2c-4bb1-ada2-18dfc518686a",
      "name": "Needs Address?"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 929019370,
          "mode": "list",
          "cachedResultName": "DeliveryZones",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=929019370"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1904,
        -4096
      ],
      "id": "ab1c3e62-08b5-4e48-ab54-7d44a86aa780",
      "name": "GS: Read Zones",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Inputs\nconst chat_id = String($json.chat_id ?? '');\nconst address_raw = String($json.address_text ?? '').trim();\nconst address = address_raw.toLowerCase();\n\n// Zones table from GS: Read Zones (5 items in your run)\nconst rows = ($items('GS: Read Zones') || []).map(i => i.json);\n\n// Build \"available\" (only those marked true)\nconst available = rows\n  .filter(r => String(r.Available).toLowerCase() === 'true')\n  .map(r => String(r.ZoneName || '').trim())\n  .filter(Boolean);\n\n// Find first matching zone by keyword (case-insensitive; comma-separated tokens supported)\nlet hit = null;\nfor (const r of rows) {\n  const kw = String(r.Keyword || '').toLowerCase();\n  if (!kw) continue;\n  const tokens = kw.split(',').map(s => s.trim()).filter(Boolean);\n  if (tokens.some(t => address.includes(t))) {\n    hit = r;\n    break;\n  }\n}\n\n// Always return an array of ONE object\nif (hit) {\n  return [{\n    json: {\n      chat_id,\n      address_text: address_raw,\n      found: true,\n      Zone: String(hit.ZoneName || '').trim(),\n      DeliveryFee: Number(hit.DeliveryFee || 0),\n      available,\n    }\n  }];\n} else {\n  return [{\n    json: {\n      chat_id,\n      address_text: address_raw,\n      found: false,\n      available,\n    }\n  }];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1920,
        -3904
      ],
      "id": "8534e86b-8025-4987-9da0-232270f344b5",
      "name": "Find Zone"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "3180f57e-c6b3-4132-9713-0eb174b9210d",
              "leftValue": "={{ $json.found }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1696,
        -3904
      ],
      "id": "f843d3ba-bbac-4465-8747-764530f68c49",
      "name": "IF Zone Found?"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Address": "={{ $json.address_text }}",
            "Zone": "={{$json.Zone}}",
            "DeliveryFee": "={{ Number($json.DeliveryFee || 0) }}",
            "CurrentStep": "=await_confirm",
            "UpdatedAt": "={{ $now }}",
            "chat_id": "={{ $json.chat_id }}",
            "LastOrderNumber": "={{$json.OrderNumber}}"
          },
          "matchingColumns": [
            "chat_id"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CartFrozen",
              "displayName": "CartFrozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1472,
        -3984
      ],
      "id": "ad908918-a175-481a-8d7d-7062c2d8d91d",
      "name": "GS: Update State (address)",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Reply: Address OK  — returns a Telegram sendMessage payload\n\nconst byChat = new Map();\nfor (const item of items) {\n  const data = item.json ?? {};\n  const key = data.chat_id ?? '__default__';\n  byChat.set(key, data);\n}\n\nconst outputs = [];\nfor (const data of byChat.values()) {\n  const chat_id = data.chat_id;\n\n  const address = String(data.Address ?? '').trim();\n  const zone    = String(data.Zone ?? '').trim();\n\n  const feeRaw  = String(data.DeliveryFee ?? '').trim();\n  const feeClean = feeRaw.replace(/[^\\d.-]/g, '');\n  const feeNum  = feeClean === '' ? null : Number(feeClean);\n  const feeText = Number.isFinite(feeNum) ? `₵${feeNum}` : 'to be confirmed';\n\n  const text = [\n    '📍 *Address saved*',\n    '',\n    `*Address:* ${address || '—'}`,\n    `*Zone:* ${zone || '—'}`,\n    `*Delivery fee:* ${feeText}`,\n    '',\n    'Use the buttons below, or type a new address to change it.'\n  ].join('\n');\n\n  const reply_markup = {\n    inline_keyboard: [\n      [{ text: '✅ Checkout',        callback_data: 'CHECKOUT|START' }],\n      [{ text: '✏️ Change address',  callback_data: 'ADDR|CHANGE' }],\n      [{ text: '🔁 Change to Pickup',callback_data: 'FULFILL|PICKUP' }],\n    ]\n  };\n\n  outputs.push({\n    json: {\n      method: 'sendMessage',\n      payload: {\n        chat_id,\n        text,\n        parse_mode: 'Markdown',\n        disable_web_page_preview: true,\n        reply_markup,\n      },\n    },\n  });\n}\n\nreturn outputs;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1248,
        -3984
      ],
      "id": "ada6ac72-ade7-47c3-b2c4-5199752d5c5a",
      "name": "Reply: Address OK"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.payload }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1024,
        -3984
      ],
      "id": "f899e331-1d7a-4d75-b3ef-0aa075dde734",
      "name": "HTTP: Send Address OK"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Reply: Zone Not Found — Code v2 (single-output)\n * IN: items containing { chat_id, address_text, available[] }\n * OUT: [{ json: { method, payload } }] for Telegram sender\n */\nconst items = $input.all();\n\nconst out = items.map(it => {\n  const j = it?.json || {};\n  const chatId = String(j.chat_id || '').trim();\n  const addr   = (j.address_text ?? '').toString().trim();\n  const zones  = Array.isArray(j.available) ? j.available : [];\n\n  const list = zones.map(z => `• ${z}`).join('\\n');\n  const text = [\n    `❌ I couldn’t match “${addr || 'your area'}” to a delivery zone.`,\n    '',\n    'Reply *with the area name* (just the name), e.g.:',\n    list || '• East Legon\\n• Airport\\n• Osu\\n• Taifa\\n• Achimota',\n  ].join('\\n');\n\n  return {\n    json: {\n      method: 'sendMessage',\n      payload: {\n        chat_id: chatId,\n        text,\n        parse_mode: 'Markdown',\n        disable_web_page_preview: true,\n        // optional: force user to reply with text\n        reply_markup: { force_reply: true }\n      }\n    }\n  };\n});\n\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1472,
        -3792
      ],
      "id": "d1cab591-a992-49fd-aa57-08a53e116f0b",
      "name": "Reply: Zone Not Found"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.payload }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1248,
        -3792
      ],
      "id": "9a1c3919-907c-45f3-a0de-b26cd765ab2e",
      "name": "HTTP: Send Zone Not Found"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chat_id": "={{ $json.chat_id }}",
            "CurrentStep": "={{$json.CurrentStep}}",
            "Fulfillment": "={{$json.Fulfillment}}",
            "UpdatedAt": "={{$json.UpdatedAt}}"
          },
          "matchingColumns": [
            "chat_id"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1008,
        -2080
      ],
      "id": "559caf86-108a-4ad6-89b3-206aceb8c34e",
      "name": "GS: Update State (delivery)1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * Set user to await_addr so the next TEXT message will be treated as a new address.\n * Also clear Zone/Fee so they’ll be recomputed.\n */\nreturn [{\n  json: {\n    chat_id: $json.chat_id,        // comes from Parse Callback → Action Router\n    CurrentStep: 'await_addr',\n    Zone: '',\n    DeliveryFee: '',\n    UpdatedAt: $now\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1904,
        -1248
      ],
      "id": "c26bd9a5-8c5f-4938-901e-f3f5ab20a3fe",
      "name": "Set Await Address (code)"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chat_id": "={{$json.chat_id}}",
            "CurrentStep": "={{$json.CurrentStep}}",
            "Zone": "={{$json.Zone}}",
            "DeliveryFee": "={{$json.DeliveryFee}}",
            "UpdatedAt": "={{$json.UpdatedAt}}"
          },
          "matchingColumns": [
            "chat_id"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1680,
        -1248
      ],
      "id": "3c69f256-b30a-4b9e-94a2-f28d333b2be4",
      "name": "Update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const isCb = Boolean($json.cqid || $json.is_callback || ($json.data && $json.data.includes('|')));\nreturn isCb ? [{ json: $json }] : [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2128,
        -1248
      ],
      "id": "ec772cf0-063c-40f6-84f8-c56a4c0e3bb7",
      "name": "Ack? (safe)2"
    },
    {
      "parameters": {
        "jsCode": "const isCb = Boolean($json.cqid || $json.is_callback || ($json.data && $json.data.includes('|')));\nreturn isCb ? [{ json: $json }] : [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2128,
        -960
      ],
      "id": "3a4bb610-7153-4e48-8126-95f1c215ce96",
      "name": "Ack? (safe)3"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1904,
        -1056
      ],
      "id": "8cb4a687-2925-4922-8158-fea042599dd2",
      "name": "GS: Read Cart",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// filter Cart — keep ONLY active, unpaid, unfrozen lines for THIS user (qty > 0)\n\n// get current chat_id from Parse Callback (or current item)\nconst ctx = $items('Parse Callback')?.[0]?.json ?? {};\nconst chat_id = String(ctx.chat_id ?? $json.chat_id ?? '');\n\n// helpers\nconst asInt = (v, d = 0) => {\n  const n = Number(v);\n  return Number.isFinite(n) ? n : d;\n};\nconst isTrue = (v) => ['true','1','yes'].includes(String(v ?? '').trim().toLowerCase());\nconst isPaid = (v) => ['paid','success','successful','confirmed','complete','completed','true','yes','1']\n  .includes(String(v ?? '').trim().toLowerCase());\n\n// source rows from GS: Read Cart (previous node)\nconst rows = $input.all().map(i => i.json);\n\n// apply filters\nconst active = rows.filter(r => {\n  if (!r || !r.SKU) return false;                  // must be a cart line\n  if (String(r.chat_id ?? '') !== chat_id) return false; // this user only\n  if (asInt(r.Quantity, 0) <= 0) return false;     // qty > 0\n  if (isTrue(r.Frozen)) return false;              // drop frozen\n  if (isPaid(r.PaymentStatus)) return false;       // drop paid\n  return true;\n});\n\n// emit same shape items for downstream nodes\nreturn active.map(r => ({ json: r }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1680,
        -1056
      ],
      "id": "8c475303-55b6-4872-b545-4cad9f3066a8",
      "name": "filter Cart"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Build a pre-payment checkout summary (Markdown) in user's existing style.\n * Accepts cart rows and one state row in ANY order.\n * Expects columns in cart: Dish, SKU, Price, Quantity, LineTotal\n * Expects state: Fulfillment, Zone, DeliveryFee\n */\n\nconst CURRENCY = '¢'; // keep your Ghana cedi symbol formatting\nconst HEADER = '🧾 *Checkout*';\nconst EMPTY = 'Your cart is empty.\\n\\nTap *Menu* to add items.';\n\n// ---- helpers ----\nconst clean = v => (v ?? '').toString().trim();\nconst num = v => {\n  const n = parseFloat(v);\n  return Number.isFinite(n) ? n : 0;\n};\nconst money = v => `${CURRENCY}${(Math.round(num(v) * 100) / 100).toString()}`;\n\n// ---- collect inputs (cart + state) in any order ----\nlet cart = [];\nlet state = {};\n\nfor (const item of $input.all()) {\n  const j = item.json || {};\n  // Heuristic: state row usually has Fulfillment and Zone fields\n  if ('Fulfillment' in j || 'Zone' in j || 'DeliveryFee' in j) {\n    // choose the first non-empty state row\n    if (!state.chat_id && j.chat_id) state = j;\n  } else {\n    cart.push(j);\n  }\n}\n\n// If the state read returned an array (some n8n versions), normalize:\nif (Array.isArray(state) && state.length) state = state[0];\n\n// Fallback to any upstream chat id\nconst chat_id = $json.chat_id\n  ?? state.chat_id\n  ?? $items(0)[0]?.json?.chat_id\n  ?? $items(1)[0]?.json?.chat_id;\n\n// ---- compute sums ----\nlet lines = [];\nlet subtotal = 0;\n\nfor (const row of cart) {\n  const dish = clean(row.Dish || row.Item || row.Name);\n  const qty  = num(row.Quantity);\n  const price = num(row.Price);\n  const line = num(row.LineTotal) || qty * price;\n\n  if (!dish || qty <= 0) continue;\n\n  subtotal += line;\n  lines.push(`• ${dish}  x${qty}  —  ${money(line)}`);\n}\n\nconst hasItems = lines.length > 0;\n\n// delivery context\nconst fulfillment = clean(state.Fulfillment).toLowerCase(); // 'delivery' | 'pickup'\nconst zone = clean(state.Zone);\nconst deliveryFee = num(state.DeliveryFee);\nconst isDelivery = fulfillment === 'delivery';\n\nconst feeLine =\n  isDelivery\n    ? (deliveryFee > 0\n        ? `\\nDelivery fee (${zone || '—'}): *${money(deliveryFee)}*`\n        : `\\nDelivery fee: *—*`)\n    : '';\n\nconst total = subtotal + (isDelivery ? deliveryFee : 0);\n\n// ---- message text ----\nlet text;\nif (!hasItems) {\n  text = EMPTY;\n} else {\n  text =\n    `${HEADER}\\n\\n` +\n    `${lines.join('\\n')}\\n\\n` +\n    `Subtotal: *${money(subtotal)}*` +\n    `${feeLine}` +\n    `\\nTotal: *${money(total)}*` +\n    `\\n\\nFulfillment: *${fulfillment || '—'}*` +\n    (isDelivery && !zone ? `\\nZone: *—* (tap “✏️ Change address”)` : '');\n}\n\n// ---- inline keyboard (keep your existing callback styles) ----\nconst keyboard = hasItems\n  ? [\n      [\n        { text: '✅ Proceed to pay', callback_data: 'PAY|INSTR' }\n      ],\n      [\n        { text: '✏️ Change address', callback_data: 'ADDR|CHANGE' },\n        { text: '🚗 Change to Pickup', callback_data: 'FULFILL|PICKUP' }\n      ],\n      [\n        { text: '🧹 Clear cart', callback_data: 'CART|CLEAR' },\n        { text: '📜 Menu', callback_data: 'MENU|REFRESH' }\n      ]\n    ]\n  : [\n      [\n        { text: '📜 Menu', callback_data: 'MENU|REFRESH' }\n      ]\n    ];\n\n// ---- emit Telegram payload ----\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text,\n      parse_mode: 'Markdown',\n      reply_markup: { inline_keyboard: keyboard }\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1232,
        -960
      ],
      "id": "66ec1592-42c5-46d3-ab15-d76350121ecd",
      "name": "Build Checkout Summary (code)"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.payload }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1008,
        -960
      ],
      "id": "96f0c1be-36a4-40f3-830a-de2a82357448",
      "name": "HTTP: Send Checkout Summary"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "chat_id",
              "lookupValue": "={{$json.chat_id}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1680,
        -864
      ],
      "id": "774ec2a2-c44d-4bcd-b909-40732308a270",
      "name": "GS: Read State1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1456,
        -960
      ],
      "id": "620ad7e2-15bb-4914-b8e1-7ac0c9602ea4",
      "name": "Join: Cart+State"
    },
    {
      "parameters": {
        "jsCode": "const isCb = Boolean($json.cqid || $json.is_callback || ($json.data && $json.data.includes('|')));\nreturn isCb ? [{ json: $json }] : [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2128,
        -544
      ],
      "id": "1d698d9c-d887-4fd9-8222-180d193f8dab",
      "name": "Ack?(safe)"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "chat_id",
              "lookupValue": "={{$json.chat_id}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1904,
        -640
      ],
      "id": "6446bfab-a2e1-45c6-a017-7f3882911fd5",
      "name": "GS: Read Cart1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "chat_id",
              "lookupValue": "={{$json.chat_id}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1520,
        -384
      ],
      "id": "cf4037d7-c34f-42c5-b57c-e111a3bcd7d6",
      "name": "GS: Read State (UserStates)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Expect input items from \"Join: Cart + OrderNo\" (one per cart row)\n// Each should have row_number and OrderNumber\nconst out = [];\nfor (const it of $input.all()) {\n  const j = it.json || {};\n  if (j.row_number != null && j.OrderNumber) {\n    out.push({ json: { row_number: j.row_number, OrderNumber: j.OrderNumber } });\n  }\n}\n// If nothing matched, don't break downstream—just emit nothing\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -368,
        -640
      ],
      "id": "92be427a-2c9c-4fcd-9f9c-f74a1bd14c0b",
      "name": "Prepare Line Updates"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code node: Build Payment Instructions (FULL VERSION)\n// - Fixes subtotal=0 (SKU-first split)\n// - Adds \"Back to checkout\" button\n// - Strong visual emphasis on TOTAL\n// -----------------------------------------------------------\n\nconst CONSTANTS = {\n  BrandName:  'Sefake Kitchen',\n  MomoName:   'Sefake Kitchen',\n  MomoNumber: '024XXXXXXX',                // <-- your MoMo number\n  BACK_TO_CHECKOUT_DATA: 'CART|CHECKOUT',  // <-- router action to return to checkout\n};\n\n// ---------- helpers ----------\nconst num = (v, d = 0) => {\n  const cleaned = String(v ?? '').replace(/[^\\d.-]/g, '');\n  const n = Number(cleaned);\n  return Number.isFinite(n) ? n : d;\n};\nconst fmt  = (v) => `¢${Number(v).toLocaleString('en-GH', { maximumFractionDigits: 2 })}`;\nconst safe = (s) => (s == null ? '' : String(s).trim());\nconst shortRef = (ref) => (ref ? String(ref).trim() : '');\n\n// ---------- collect all incoming rows ----------\nconst rows = items.map(it => it.json);\n\n// ---------- split into cart vs state/order (SKU-first to avoid misclassifying cart rows) ----------\nlet cart = [];\nlet order = {};\nfor (const j of rows) {\n  const isCartish  = !!(j.SKU || j.Dish || j.Item || j.Name);\n  const isStateish = ('Fulfillment' in j) || ('DeliveryFee' in j) || ('Zone' in j) || ('chat_id' in j);\n\n  if (isCartish) {\n    cart.push(j);\n    if (!order.OrderNumber && j.OrderNumber) order.OrderNumber = safe(j.OrderNumber);\n    if (!order.chat_id    && j.chat_id)     order.chat_id    = j.chat_id;\n  } else if (isStateish) {\n    if (!order.chat_id && j.chat_id) order = { ...j, ...order };\n    else order = { ...order, ...j };\n    if (!order.OrderNumber && j.OrderNumber) order.OrderNumber = safe(j.OrderNumber);\n  } else if (j.OrderNumber && !order.OrderNumber) {\n    order.OrderNumber = safe(j.OrderNumber);\n  }\n}\n\n// ---------- constants (prefer sheet overrides where present) ----------\nconst BrandName   = safe(order.BrandName)   || CONSTANTS.BrandName;\nconst MomoName    = safe(order.MomoName)    || CONSTANTS.MomoName;\nconst MomoNumber  = safe(order.MomoNumber)  || CONSTANTS.MomoNumber;\nconst BACK_CB     = CONSTANTS.BACK_TO_CHECKOUT_DATA;\n\n// ---------- compute money ----------\nlet subtotal = 0;\nfor (const line of cart) {\n  const lt   = num(line.LineTotal);\n  const p    = num(line.Price);\n  const qty  = num(line.Quantity, 1);\n  subtotal  += (Number.isFinite(lt) && lt > 0) ? lt : (p * qty);\n}\nconst deliveryFee = num(order.DeliveryFee, 0);\nconst total       = subtotal + deliveryFee;\n\n// ---------- derive reference & chat ----------\nconst refCode = shortRef(order.OrderNumber || order.OrderUID || order.OrderId || '');\nconst chat_id = order.chat_id || order.ChatID || order.chatid || order.user_id;\n\n// ---------- build message (make TOTAL unmissable) ----------\nconst headline = '💳 *Payment for Order*' + (refCode ? `\nRef: *${refCode}*` : '');\nconst breakdown = [\n  `Subtotal: *${fmt(subtotal)}*`,\n  ...(deliveryFee > 0 ? [`Delivery fee: *${fmt(deliveryFee)}*`] : []),\n].join('\n');\n\nconst totalPanel = [\n  '━━━━━━━━━━━━━━━━━━━━',\n  `💥 *TOTAL TO PAY: ${fmt(total)}*`,\n  '━━━━━━━━━━━━━━━━━━━━',\n].join('\n');\n\nlet lines = [];\nlines.push(headline);\nlines.push('');\nlines.push(breakdown);\nlines.push(totalPanel);\nlines.push('');\nlines.push('🟡 *Very important*');\nif (refCode) {\n  lines.push('When paying, type this in the *Reference/Reason/Message* field:');\n  lines.push(`🧾 *${refCode}*`);\n}\nlines.push('This lets our admin match your payment quickly.');\nlines.push('');\nlines.push('📲 *MoMo Details*');\nlines.push(`• Number: ${MomoNumber}`);\nlines.push(`• Name: ${MomoName}`);\nlines.push('');\nlines.push('After paying, tap *I have paid*. Or tap *Back to checkout* to review your order.');\nconst text = lines.join('\n');\n\n// ---------- inline keyboard ----------\nconst confirmCb = `PAY|CONFIRM|${refCode || 'UNKNOWN'}`;\nconst reply_markup = {\n  inline_keyboard: [\n    [{ text: '✅ I have paid',      callback_data: confirmCb }],\n    [{ text: '⬅️ Back to checkout', callback_data: BACK_CB }],\n  ],\n};\n\n// ---------- return Telegram payload ----------\nreturn [\n  {\n    json: {\n      method: 'sendMessage',\n      payload: {\n        chat_id,\n        text,\n        parse_mode: 'Markdown',\n        reply_markup,\n      },\n    },\n  },\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -144,
        -400
      ],
      "id": "1be264f8-9f24-4e51-aadf-01b0dbea7e67",
      "name": "Build Payment Instructions"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.payload }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        80,
        -400
      ],
      "id": "8d760adc-1d18-41f6-b7ec-342f6a7e3c19",
      "name": "HTTP: Send Payment Instructions"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chat_id": "={{$json.chat_id}}",
            "CurrentStep": "=await_payment",
            "LastOrderNumber": "={{$json.OrderNumber}}",
            "UpdatedAt": "={{$now}}",
            "LastOrderUID": "={{$json.OrderNumber}}",
            "DeliveryFee": "={{ Number($json.DeliveryFee ?? $json.delivery_fee ?? 0) }}"
          },
          "matchingColumns": [
            "chat_id"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CartFrozen",
              "displayName": "CartFrozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -288,
        -960
      ],
      "id": "c77886f7-a42a-402c-9d76-9d54d76005a2",
      "name": "GS: Update State (await_payment + LastOrderNumber)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Input: all active cart lines (current cart)\n// Output: one meta object with { OrderNumber, OrderUID }\n\nconst items = $input.all().map(i => i.json);\n\n// Helper: treat TRUE/'TRUE' as true\nconst isTrue = v => v === true || String(v).toLowerCase() === 'true';\n\n// 1) If any UNFROZEN line already has an OrderNumber, reuse it (same active cart)\nconst existing = items.find(l => !isTrue(l.Frozen) && String(l.OrderNumber || '').trim() !== '');\nif (existing) {\n  return [{ json: { OrderNumber: String(existing.OrderNumber), OrderUID: String(existing.OrderNumber) } }];\n}\n\n// 2) Otherwise mint a fresh short, low-collision ref\nconst chatId = (items[0]?.chat_id ?? '') + '';\nfunction makeRef(chatIdStr) {\n  const t = Date.now(); // ms\n  // 4 chars of rolling time + 3 chars of a tiny hash of (chat_id + t) => 7 chars total\n  const time4 = (t % (36 ** 4)).toString(36).toUpperCase().padStart(4, '0');\n  let h = 0; const s = chatIdStr + '|' + t;\n  for (let i = 0; i < s.length; i++) h = ((h * 31) + s.charCodeAt(i)) >>> 0;\n  const tail3 = (h % (36 ** 3)).toString(36).toUpperCase().padStart(3, '0');\n  return `SFK-${time4}${tail3}`; // e.g., SFK-7Q9KX1J (7 after dash)\n}\n\nconst ref = makeRef(chatId);\nreturn [{ json: { OrderNumber: ref, OrderUID: ref } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1296,
        -288
      ],
      "id": "b123f95d-be4a-4cbf-bad5-494b1705373a",
      "name": "Ensure Order Number"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "row_number": "={{$json.row_number}}",
            "OrderNumber": "={{$json.OrderNumber}}",
            "PaymentStatus": "PENDING"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "Timestamp",
              "displayName": "Timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineId",
              "displayName": "LineId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "SKU",
              "displayName": "SKU",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Dish",
              "displayName": "Dish",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Price",
              "displayName": "Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Quantity",
              "displayName": "Quantity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineTotal",
              "displayName": "LineTotal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OrderNumber",
              "displayName": "OrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Frozen",
              "displayName": "Frozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -144,
        -640
      ],
      "id": "5d517e14-f050-4a0b-94d9-79037640fcfa",
      "name": "GS: Update Lines (Orders)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// filter Cart — keep ONLY active, unpaid, unfrozen lines for THIS user (qty > 0)\n\n// get current chat_id from Parse Callback (or current item)\nconst ctx = $items('Parse Callback')?.[0]?.json ?? {};\nconst chat_id = String(ctx.chat_id ?? $json.chat_id ?? '');\n\n// helpers\nconst asInt = (v, d = 0) => {\n  const n = Number(v);\n  return Number.isFinite(n) ? n : d;\n};\nconst isTrue = (v) => ['true','1','yes'].includes(String(v ?? '').trim().toLowerCase());\nconst isPaid = (v) => ['paid','success','successful','confirmed','complete','completed','true','yes','1']\n  .includes(String(v ?? '').trim().toLowerCase());\n\n// source rows from GS: Read Cart (previous node)\nconst rows = $input.all().map(i => i.json);\n\n// apply filters\nconst active = rows.filter(r => {\n  if (!r || !r.SKU) return false;                  // must be a cart line\n  if (String(r.chat_id ?? '') !== chat_id) return false; // this user only\n  if (asInt(r.Quantity, 0) <= 0) return false;     // qty > 0\n  if (isTrue(r.Frozen)) return false;              // drop frozen\n  if (isPaid(r.PaymentStatus)) return false;       // drop paid\n  return true;\n});\n\n// emit same shape items for downstream nodes\nreturn active.map(r => ({ json: r }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1680,
        -640
      ],
      "id": "00a15225-d631-4e15-ba33-853d357a62ea",
      "name": "filter Cart (qty>0)"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -1152,
        -640
      ],
      "id": "b260a076-14ba-439e-8ec4-24d5bca8d988",
      "name": "Join: Cart + OrderNo"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -368,
        -400
      ],
      "id": "595b909e-0071-49ea-a295-8f780740aab2",
      "name": "Join: PayCard Inputs"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.data }}",
                    "rightValue": "PAY|CONFIRM",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    },
                    "id": "2accc4da-cda9-4d0f-ba1f-43e8f7a549b8"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "confirm"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -5664,
        -1936
      ],
      "id": "6f7c65a7-3c29-4286-a39b-a28ff81f69eb",
      "name": "PAY|CONFIRM?"
    },
    {
      "parameters": {
        "jsCode": "// Extracts PAY|CONFIRM|REF from callback data and keeps chat context\nconst data = String($json.data || '');\nconst parts = data.split('|'); // [\"PAY\",\"CONFIRM\",\"REF\"]\nconst ref = (parts[2] || '').trim();\n\nreturn [{\n  json: {\n    chat_id: String($json.chat_id || ''),\n    ref,\n    message_id: $json.message_id || null,\n    cqid: $json.cqid || null,   // callback_query_id for answerCallbackQuery\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5024,
        -1936
      ],
      "id": "f55ab010-f478-4168-bd1c-74988593bdcc",
      "name": "Extract PAY|CONFIRM Ref"
    },
    {
      "parameters": {
        "jsCode": "// Immediately answer the callback to stop the spinner\nreturn [{\n  json: {\n    method: 'answerCallbackQuery',\n    payload: {\n      callback_query_id: $json.cqid,\n      text: 'Thanks! Checking payment…',\n      show_alert: false\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4800,
        -1744
      ],
      "id": "8ca9398e-00bf-45e6-b6b2-bea4fa74699a",
      "name": "Answer Callback (immediate)"
    },
    {
      "parameters": {
        "jsCode": "const chat_id = $items('Extract PAY|CONFIRM Ref')[0].json.chat_id;\nconst ref = $items('Extract PAY|CONFIRM Ref')[0].json.ref;\n\nconst text = [\n  '⚠️ *Payment reference not recognised*',\n  ref ? `Ref: *${ref}*` : '',\n  '',\n  'Please double-check and try again.',\n  'If you just paid, wait a few seconds and tap *I have paid* again.'\n].filter(Boolean).join('\\n');\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text,\n      parse_mode: 'Markdown',\n      reply_markup: {\n        inline_keyboard: [[\n          { text: '⬅️ Back to checkout', callback_data: 'CHK|REVIEW' }\n        ]]\n      }\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3456,
        -2032
      ],
      "id": "ddfdb77c-6b7d-43b1-be3f-93e75537964a",
      "name": "Reply: Ref Not Found"
    },
    {
      "parameters": {
        "jsCode": "// Build a simple \"processing payment\" message for the customer\nconst ref = $json.ref || 'UNKNOWN';\nconst chat_id = $json.chat_id;\n\nconst text = [\n  '💳 *Processing your payment...*',\n  `Ref: *${ref}*`,\n  '',\n  '_Please wait a moment while we confirm your payment._'\n].join('\\n');\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text,\n      parse_mode: 'Markdown',\n      reply_markup: {\n        inline_keyboard: [\n          [{ text: '⬅️ Back to checkout', callback_data: 'CHK|REVIEW' }]\n        ]\n      }\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4800,
        -1936
      ],
      "id": "c5d59f58-f639-4555-83df-c497994ce820",
      "name": "Build Customer Processing Message"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b187d5db-ac97-499b-b3ae-ccdee5719f0a",
              "leftValue": "={{ $json.OrderNumber }}",
              "rightValue": "={{ $items(\"Extract PAY|CONFIRM Ref\")[0].json.ref }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "d18b778a-97d8-4bcc-a0c0-b4cda3fef181",
              "leftValue": "={{ String($json.chat_id) }}",
              "rightValue": "={{ String($items(\"Extract PAY|CONFIRM Ref\")[0].json.chat_id) }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4576,
        -2128
      ],
      "id": "4b227f8f-6a35-4c54-91b8-da04b66b18f7",
      "name": "IF: OrderNumber matches ref (IF)"
    },
    {
      "parameters": {
        "jsCode": "// Aggregate all rows that passed the IF (these are the actual cart lines)\nconst refCtx   = $items('Extract PAY|CONFIRM Ref')[0].json;\nconst chat_id  = String(refCtx.chat_id || '');\nconst ref      = String(refCtx.ref || '');\n\nconst lines = $input.all().map(i => i.json);\n\n// Compute money\nconst money = n => `₵${(Number(n)||0).toFixed(2)}`;\nlet subtotal = 0;\nfor (const l of lines) {\n  const lt = Number(l.LineTotal || 0);\n  const p  = Number(l.Price || 0);\n  const q  = Number(l.Quantity || 1);\n  subtotal += lt > 0 ? lt : (p * q);\n}\n\n// Delivery fee (if present on any line; else 0)\nconst deliveryFee = Number((lines.find(l => l.DeliveryFee != null)?.DeliveryFee) || 0);\nconst total = subtotal + deliveryFee;\n\n// Compact item lines (for kitchen msg later)\nconst itemLines = lines.map(l => `• ${l.Dish || l.SKU} x${l.Quantity} — ${money(l.LineTotal || (l.Price||0)*(l.Quantity||1))}`);\n\nreturn [{\n  json: { chat_id, ref, lines, subtotal, deliveryFee, total, itemLines }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4352,
        -2128
      ],
      "id": "575282f1-950e-4a3e-8cab-b88259768a3f",
      "name": "Aggregate Lines & Totals"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -3904,
        -2208
      ],
      "id": "752988a2-de80-4a31-9fe5-6a662f1cf6ad",
      "name": "GS: Read Orders (by ref)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * Enrich the aggregated cart with DeliveryFee (and Fulfillment) from Orders.\n * Matches by (OrderNumber OR LastOrderNumber) AND chat_id.\n */\n\nfunction normalizeRows(arr) {\n  const rows = [];\n  for (const it of arr) {\n    const j = it.json || {};\n    if (Array.isArray(j.data)) rows.push(...j.data);\n    else rows.push(j);\n  }\n  return rows;\n}\n\n// Aggregated payload from previous step\nconst agg      = $items('Aggregate Lines & Totals')[0].json;\nconst ref      = String(agg.ref || '').trim();\nconst chat_id  = String(agg.chat_id || '').trim();\n\n// All rows coming from \"GS: Read Orders (by ref)\"\nconst ordersRows = normalizeRows($input.all());\n\n// Find a row where (OrderNumber == ref OR LastOrderNumber == ref) AND chat_id matches\nconst order = ordersRows.find(r => {\n  const rChat = String(r.chat_id ?? '').trim();\n  const ord   = String(r.OrderNumber ?? '').trim();\n  const last  = String(r.LastOrderNumber ?? '').trim();\n  return rChat === chat_id && (ord === ref || last === ref);\n}) || {};\n\n// Pull values & recompute\nconst deliveryFee = Number(order.DeliveryFee ?? order.deliveryFee ?? 0);\nconst fulfillment = String(order.Fulfillment ?? order.fulfillment ?? '');\nconst orderRowNum = order.row_number ?? null;\n\nreturn [{\n  json: {\n    ...agg,\n    deliveryFee,\n    total: Number(agg.subtotal || 0) + deliveryFee,\n    fulfillment,\n    orderRow_number: orderRowNum\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3456,
        -2256
      ],
      "id": "55916dd0-13e7-4f42-9437-751c3742da5c",
      "name": "Attach Delivery Fee"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Build Freeze Updates\n * Inputs: cart rows + guard context\n * Output: one item per cart row with Frozen/Payment fields set.\n */\n\nconst items = $input.all();\nconst rows = [];\nfor (const item of items) {\n  const json = item && item.json ? item.json : {};\n  const rowNum = Number(json.row_number);\n  if (Number.isFinite(rowNum) && rowNum > 0) {\n    rows.push({ ...json, row_number: rowNum });\n  }\n}\n\nif (!rows.length) {\n  return [];\n}\n\nconst now = new Date().toISOString();\n\nreturn rows.map(row => ({\n  json: {\n    row_number: row.row_number,\n    Frozen: 'TRUE',\n    CurrentStep: 'paid',\n    PaymentStatus: 'PAID',\n    UpdatedAt: now,\n  },\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3920,
        -1232
      ],
      "id": "005c3906-b0cc-435b-9d64-b879a23aa2ed",
      "name": "Build Freeze Updates"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "row_number": "={{ $json.row_number }}",
            "Frozen": "={{ $json.Frozen }}",
            "CurrentStep": "={{ $json.CurrentStep }}",
            "PaymentStatus": "={{ $json.PaymentStatus }}",
            "UpdatedAt": "={{ $json.UpdatedAt }}"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "Timestamp",
              "displayName": "Timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineId",
              "displayName": "LineId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "SKU",
              "displayName": "SKU",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Dish",
              "displayName": "Dish",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Price",
              "displayName": "Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Quantity",
              "displayName": "Quantity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineTotal",
              "displayName": "LineTotal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OrderNumber",
              "displayName": "OrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Frozen",
              "displayName": "Frozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -3696,
        -1232
      ],
      "id": "f8b29d2e-25e0-4818-8fb0-583225684ac1",
      "name": "GS: Update Cart Lines",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chat_id": "={{ $json.chat_id }}",
            "PaymentStatus": "PAID",
            "CurrentStep": "paid",
            "LastOrderNumber": "={{ $json.ref }}",
            "UpdatedAt": "={{ $now }}",
            "CartFrozen": "TRUE"
          },
          "matchingColumns": [
            "chat_id"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CartFrozen",
              "displayName": "CartFrozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -3040,
        -560
      ],
      "id": "708bb63a-865e-4a69-98b1-0ab4e3721072",
      "name": "GS: Update UserStates (mark paid)",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "45aa099a-fff5-42d8-80b7-8d3959ff65d7",
              "leftValue": "={{ Number($json.row_number || 0) > 0 }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3680,
        -2208
      ],
      "id": "4f876de5-d855-498e-a1f5-a970e9b57c45",
      "name": "IF: Has Order row?"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "row_number": "={{$json.row_number}}",
            "CurrentStep": "paid",
            "PaymentStatus": "PAID"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "Timestamp",
              "displayName": "Timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineId",
              "displayName": "LineId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "SKU",
              "displayName": "SKU",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Dish",
              "displayName": "Dish",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Price",
              "displayName": "Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Quantity",
              "displayName": "Quantity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineTotal",
              "displayName": "LineTotal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OrderNumber",
              "displayName": "OrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Frozen",
              "displayName": "Frozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Deleted",
              "displayName": "Deleted",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "OrderUID",
              "displayName": "OrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2784,
        -768
      ],
      "id": "030acd36-9bde-48b4-b055-6d8ef2750afc",
      "name": "GS: Update Orders (mark paid)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Build Kitchen Message — APPROVE\n// expects from \"Attach Delivery Fee — APPROVE\":\n//   ref, fulfillment, itemLines[], subtotal, deliveryFee, total\n\nconst KITCHEN_CHAT_ID = -1002927487274;   // <-- replace with YOUR kitchen chat/channel id\n\n// pull + normalize\nconst ref          = String($json.ref || '—');\nconst fulfill      = String($json.fulfillment || 'delivery');\nconst items        = Array.isArray($json.itemLines) ? $json.itemLines : [];\nconst subtotal     = Number($json.subtotal || 0);\nconst deliveryFee  = Number($json.deliveryFee || 0);\nconst total        = Number($json.total || (subtotal + deliveryFee));\n\n// guard: if no kitchen id, bail quietly\nif (!KITCHEN_CHAT_ID) return [];\n\n// money helper (cedi)\nconst money = n => `₵${Number(n || 0).toFixed(2)}`;\n\nconst lineSep = '__________________________________';\nconst bullet  = items.length\n  ? items.map((l, i) => `${i + 1}. ${l}`).join('\\n')    // 1-based numbering\n  : '—';\n\nconst text = [\n  '✅ *PAID ORDER*',\n  `Ref: *${ref}*`,\n  `Fulfillment: *${fulfill}*`,\n  '',\n  'Items:',\n  bullet,\n  '',\n  `Subtotal: ${money(subtotal)}`,\n  `Delivery fee: ${money(deliveryFee)}`,\n  lineSep,\n  `TOTAL: *${money(total)}*`,\n  lineSep\n].join('\\n');\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id: KITCHEN_CHAT_ID,\n      text,\n      parse_mode: 'Markdown'\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3264,
        -944
      ],
      "id": "82864b0c-11b0-465a-8167-d825127a0ac3",
      "name": "Build Kitchen Message"
    },
    {
      "parameters": {
        "jsCode": "// Customer Ack (APPROVE path)\n// expects: chat_id, ref, total, fulfillment (from Attach Delivery Fee — APPROVE)\n\nconst chatId  = String($json.chat_id || '');\nconst ref     = String($json.ref || '—');\nconst fulfill = String($json.fulfillment || 'your order');\nconst total   = Number($json.total || 0);\n\n// (Optional) guard: if chatId is missing, do nothing to avoid HTTP error\nif (!chatId) return [];\n\nconst text = [\n  '✅ *Payment received!*',\n  `Ref: *${ref}*`,\n  '',\n  `Total paid: *₵${total.toFixed(2)}*`,\n  '',\n  `Thanks! We’re preparing for ${fulfill}.`, \n  '_Our driver will call you when it’s ready for delivery/pickup._'\n].join('\\n');\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id: chatId,\n      text,\n      parse_mode: 'Markdown',\n      reply_markup: {\n        inline_keyboard: [\n                    [{ text: '🍽️ Continue shopping', callback_data: 'MENU|REFRESH' }]\n        ]\n      }\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3264,
        -1136
      ],
      "id": "5ad41b86-dcaa-4044-afd1-90f3499553e0",
      "name": "Build Customer Ack"
    },
    {
      "parameters": {
        "jsCode": "const ADMIN_CHAT_ID = -1002927487274; // <-- your staff chat id\nconst { ref, chat_id, itemLines = [], subtotal = 0, deliveryFee = 0, total = 0, fulfillment = '' } = $json;\n\n// keep callback small: only ref + chat_id\nconst packed = JSON.stringify({ ref, chat_id });\n\nconst txt = [\n  '🧾 *Payment review*',\n  `Ref: *${ref}*`,\n  fulfillment ? `Fulfillment: *${fulfillment}*` : '',\n  '',\n  'Items:',\n  ...itemLines,\n  '',\n  `Subtotal: *₵${(+subtotal).toFixed(2)}*`,\n  deliveryFee > 0 ? `Delivery fee: *₵${(+deliveryFee).toFixed(2)}*` : '',\n  '━━━━━━━━━━━━━━━━━━━━',\n  `TOTAL: *₵${(+total).toFixed(2)}*`,\n  '━━━━━━━━━━━━━━━━━━━━',\n].filter(Boolean).join('\\n');\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id: ADMIN_CHAT_ID,\n      text: txt,\n      parse_mode: 'Markdown',\n      reply_markup: {\n        inline_keyboard: [[\n          { text: '✅ Approve', callback_data: `ADMIN|APPROVE|${packed}` },\n          { text: '❌ Reject',  callback_data: `ADMIN|REJECT|${packed}` }\n        ]]\n      }\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3232,
        -2256
      ],
      "id": "9b9d5a80-b470-4625-8654-9d95a2f4a472",
      "name": "Build Admin Review Message"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.data }}",
                    "rightValue": "ADMIN|APPROVE",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    },
                    "id": "4d282e37-536b-4c31-8e50-aa5353ca13ef"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "approve"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c2dbb448-ee59-47a7-b1bd-73ec4fe25eb3",
                    "leftValue": "={{ $json.data }}",
                    "rightValue": "ADMIN|REJECT",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "reject"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -5664,
        -896
      ],
      "id": "d89965f1-8ba4-42b3-9783-ddb898d7568a",
      "name": "ADMIN?"
    },
    {
      "parameters": {
        "jsCode": "// Input: callback_data like \"ADMIN|APPROVE|{\"ref\":\"SFK-XXXX\",\"chat_id\":\"5441626742\"}\"\nconst evt = $json;\nconst parts = String(evt.data || '').split('|');\nconst action = parts[1]; // APPROVE or REJECT\nlet packed = {};\ntry { packed = JSON.parse(parts[2] || '{}'); } catch (e) { packed = {}; }\n\nconst user_chat_id  = String(packed.chat_id || '');         // the CUSTOMER we’re acting on\nconst admin_chat_id = String(evt.chat_id || '');             // the admin/channel who tapped\nconst ref           = String(packed.ref || '');\n\nreturn [{\n  json: {\n    action,                  // \"APPROVE\" / \"REJECT\"\n    ref,                     // order reference\n    // IMPORTANT: from here on, chat_id = CUSTOMER (for states/orders/messages to user)\n    chat_id: user_chat_id,\n    user_chat_id,\n    admin_chat_id,           // keep for admin ack if you need it\n    cqid: evt.cqid || evt.callback_query_id || null,\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5024,
        -1312
      ],
      "id": "8c8ca7ea-7685-4644-ae79-514ced47202e",
      "name": "Extract Admin Action"
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n    method: 'answerCallbackQuery',\n    payload: { callback_query_id: $json.cqid, text: 'Noted.', show_alert: false }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4800,
        -1520
      ],
      "id": "f9579821-4c07-4e21-bc45-ca5840117dcc",
      "name": "Answer Admin Callback"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chat_id": "={{ $json.chat_id }}",
            "PaymentStatus": "={{ $json.PaymentStatus || 'REJECTED' }}",
            "CurrentStep": "={{ $json.CurrentStep || 'rejected' }}",
            "CartFrozen": "={{ $json.CartFrozen || 'TRUE' }}",
            "LastOrderNumber": "={{ $json.LastOrderNumber || $items('Extract Admin Action(Reject)')[0].json.ref }}",
            "UpdatedAt": "={{ $json.UpdatedAt || $now }}"
          },
          "matchingColumns": [
            "chat_id"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CartFrozen",
              "displayName": "CartFrozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -4128,
        -608
      ],
      "id": "78721e40-74fc-4c1f-9f41-85a0ffc3dfec",
      "name": "GS: Update UserStates (reject)",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const ex = $items('Extract Admin Action(Reject)')[0]?.json || {};\nconst chat_id = String($json.chat_id || ex.chat_id || '');\nif (!chat_id) return [];\n\nconst ref     = String($json.OrderNumber || $json.ref || ex.ref || '—');\nconst fulfill = String($json.Fulfillment || $json.fulfillment || 'your order');\nconst reason  = String(ex.reject_reason || $json.reject_reason || '').trim();\n\nconst text = [\n  '❌ *Order not accepted*',\n  `Ref: *${ref}*`,\n  '',\n  `We’re unable to proceed with ${fulfill} at this time.`,\n  reason ? `Reason: _${reason}_` : '',\n  '',\n  'You can try again or contact us below:'\n].filter(Boolean).join('\\n');\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id, text, parse_mode: 'Markdown',\n      reply_markup: { inline_keyboard: [\n        [{ text: '🧾 View menu',  callback_data: 'MENU|OPEN' }],\n        [{ text: '🔁 Start over', callback_data: 'RESET|START' }],\n        [{ text: '☎️ Contact support', callback_data: 'HELP|AGENT' }]\n      ] }\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4352,
        -160
      ],
      "id": "c61812f2-fdf8-478c-b050-cfeddc7d13b4",
      "name": "Notify Customer (rejected)"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Guard: stop duplicate \"Approve\" runs.\n * Blocks when the last processed order matches this ref\n * and is already paid, rejected, or frozen.\n */\n\nconst ctx = {\n  chat_id: String($json.chat_id || '').trim(),\n  ref: String($json.ref || '').trim(),\n};\n\nconst rows = $input.all().map(i => i.json);\nconst state = rows.find(r => String(r.chat_id || '').trim() === ctx.chat_id) || {};\n\nconst status = String(state.PaymentStatus || '').trim().toUpperCase();\nconst paid = status === 'PAID';\nconst rejected = status === 'REJECTED';\nconst frozen = String(state.CartFrozen || '').trim().toUpperCase() === 'TRUE';\nconst lastRef = String(state.LastOrderNumber || '').trim();\n\nconst isSameOrder = !!(lastRef && ctx.ref && lastRef === ctx.ref);\n\nif (isSameOrder && (paid || rejected || frozen)) {\n  return [];\n}\n\nreturn [{ json: { ...$json } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4352,
        -1312
      ],
      "id": "4e6484b3-36c0-40a7-9096-a0cff308d609",
      "name": "Guard: Already Paid?"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -4576,
        -1232
      ],
      "id": "7fdcca82-3c56-41a6-ac24-873005c4c02e",
      "name": "GS: Read UserStates (by chat_id)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "OrderNumber",
              "lookupValue": "={{ ($json.ref || '').trim() }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -5200,
        -960
      ],
      "id": "7ac8cab5-2f48-45e5-8e7d-ea1b475d6892",
      "name": "GS: Read Cart (by ref) — APPROVE",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "chat_id",
              "lookupValue": "={{$json.chat_id}}"
            },
            {
              "lookupColumn": "OrderNumber",
              "lookupValue": "={{$json.ref}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -4800,
        -2128
      ],
      "id": "868cb29a-d7f2-4bbb-a2ce-f19f83abae76",
      "name": "GS: Read Cart (by ref) — REVIEW",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.payload }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3008,
        -2256
      ],
      "id": "b8dbb3b3-92cf-4ca9-bb11-c2797f500806",
      "name": "HTTP Send → Admin Review"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.payload }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4576,
        -1936
      ],
      "id": "5076e2d4-b1c8-4878-90bb-92f8422dd5a6",
      "name": "HTTP Send → Customer Processing"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.payload }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3040,
        -1136
      ],
      "id": "f7514789-e10b-4f35-8a5c-cbdd01276c95",
      "name": "HTTP Send → Customer Paid"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.payload }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3040,
        -944
      ],
      "id": "25ac59e4-03d7-439d-b0ce-271d08f0d497",
      "name": "HTTP Send → Kitchen Paid"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.payload }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4576,
        -1520
      ],
      "id": "06621a9a-5b84-49b9-833f-26206cc59dda",
      "name": "HTTP: Telegram Send"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.payload }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3232,
        -2032
      ],
      "id": "d46de235-346d-4d53-80ac-3bf08b778458",
      "name": "HTTP Send → CUSTOMER Ref Not Found"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Drop items whose chat_id looks like a channel/supergroup (-100…)\n * or any non-positive id. Only allow real user ids.\n */\nconst id = String($json.chat_id || '');\nconst isChannelLike = id.startsWith('-100');\nconst isNonPositive  = /^-?\\d+$/.test(id) && Number(id) <= 0;\n\nif (isChannelLike || isNonPositive) {\n  // don't write state for channels/groups\n  return [];\n}\n\n// pass through\nreturn [{ json: $json }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4800,
        -1232
      ],
      "id": "0294243c-03f3-400a-9993-446282dd5476",
      "name": "Guard: Skip Channel IDs"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Drop items whose chat_id looks like a channel/supergroup (-100…)\n * or any non-positive id. Only allow real user ids.\n */\nconst id = String($json.chat_id || '');\nconst isChannelLike = id.startsWith('-100');\nconst isNonPositive  = /^-?\\d+$/.test(id) && Number(id) <= 0;\n\nif (isChannelLike || isNonPositive) {\n  // don't write state for channels/groups\n  return [];\n}\n\n// pass through\nreturn [{ json: $json }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3264,
        -560
      ],
      "id": "304868e6-02b7-4a84-9537-048cf72914c4",
      "name": "Guard: Skip Channel IDs1"
    },
    {
      "parameters": {
        "jsCode": "const id = String($json.chat_id || '');\nif (id.startsWith('-100') || (!/^\\d+$/.test(id)) || Number(id) <= 0) return [];\nreturn [{ json: $json }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4576,
        -608
      ],
      "id": "d351956e-8542-41a1-a94b-e17e026f44e7",
      "name": "Guard: Skip Channel IDs2"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Drop items whose chat_id looks like a channel/supergroup (-100…)\n * or any non-positive id. Only allow real user ids.\n */\nconst id = String($json.chat_id || '');\nconst isChannelLike = id.startsWith('-100');\nconst isNonPositive  = /^-?\\d+$/.test(id) && Number(id) <= 0;\n\nif (isChannelLike || isNonPositive) {\n  // don't write state for channels/groups\n  return [];\n}\n\n// pass through\nreturn [{ json: $json }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4752,
        -3456
      ],
      "id": "2674b7d9-e146-45dd-9212-9347310619b6",
      "name": "Guard: Skip Channel IDs3"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Drop items whose chat_id looks like a channel/supergroup (-100…)\n * or any non-positive id. Only allow real user ids.\n */\nconst id = String($json.chat_id || '');\nconst isChannelLike = id.startsWith('-100');\nconst isNonPositive  = /^-?\\d+$/.test(id) && Number(id) <= 0;\n\nif (isChannelLike || isNonPositive) {\n  // don't write state for channels/groups\n  return [];\n}\n\n// pass through\nreturn [{ json: $json }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5424,
        -3456
      ],
      "id": "571a5afd-2082-43f2-94e4-0b855640ac18",
      "name": "Guard: Skip Channel IDs4"
    },
    {
      "parameters": {
        "jsCode": "// APPROVE aggregator – no cross-branch references\nconst ctx = ($items('Extract Admin Action')[0]?.json) || {};\nconst chat_id = String(ctx.chat_id || '');\nconst ref     = String(ctx.ref || '');\n\n// cart rows arrive as $input items\nconst lines = $input.all().map(i => i.json);\n\n// subtotal from LineTotal (fallback to Price*Quantity)\nlet subtotal = 0;\nconst money = n => `¢${Number(n || 0).toFixed(2)}`;\n\nfor (const l of lines) {\n  const lt = Number(l.LineTotal || 0);\n  const p  = Number(l.Price || 0);\n  const q  = Number(l.Quantity || 0);\n  subtotal += lt > 0 ? lt : (p * q);\n}\n\nconst itemLines = lines.map(l => {\n  const qty = Number(l.Quantity || 0);\n  const line = Number(l.LineTotal || (Number(l.Price||0) * qty));\n  return `• ${l.Dish} x${qty} — ${money(line)}`;\n});\n\nreturn [{\n  json: {\n    chat_id, ref, lines, subtotal, itemLines\n    // deliveryFee & total added next node\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4400,
        -864
      ],
      "id": "38df45a6-8898-4853-9dd4-aa9e3400a24b",
      "name": "Aggregate Lines & Totals — APPROVE"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -4144,
        -928
      ],
      "id": "dd44409c-449f-419f-8925-b3fcc4e7e532",
      "name": "GS: Read Orders (by ref)-Approve",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Attach Delivery Fee — APPROVE (after Merge)\nconst chat_id     = String($json.chat_id || '');\nconst ref         = String($json.ref || '—');\n\nconst subtotal    = Number($json.subtotal || 0);\nconst itemLines   = Array.isArray($json.itemLines) ? $json.itemLines : [];\nconst lines       = Array.isArray($json.lines) ? $json.lines : [];\n\nconst row_number  = Number($json.row_number);                           // <— pass this through\nconst fulfillment = String($json.Fulfillment || $json.fulfillment || '');\nconst deliveryFee = Number(($json.DeliveryFee ?? $json.deliveryFee) || 0);\nconst total       = subtotal + deliveryFee;\n\n// guard: no row_number, don’t proceed (prevents null errors downstream)\nif (!Number.isFinite(row_number) || row_number <= 0) return [];\n\nreturn [{\n  json: { chat_id, ref, row_number, fulfillment, lines, itemLines, subtotal, deliveryFee, total }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3696,
        -848
      ],
      "id": "6d660d91-4968-42cb-87ca-c72544f0155e",
      "name": "Attach Delivery Fee — APPROVE"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -3920,
        -848
      ],
      "id": "43488d5c-1ac5-41d1-ba05-003cd3874bc7",
      "name": "Merge (agg + order)"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.payload }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4128,
        -176
      ],
      "id": "2fdd075f-b110-46da-8e90-d9a0efd77369",
      "name": "HTTP Send → Customer Reject"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Build Reject Updates (cart lines) — Code v2, single-output\n * IN: items from \"GS: Read Cart (by ref) — REJECT\"\n * OUT: one item per line to reject, each wrapped as { json: { ... } }\n */\nconst updates = [];\nfor (const item of $input.all()) {\n  const r = (item && item.json) ? item.json : {};\n  const rn = Number(r.row_number);\n  if (!Number.isFinite(rn) || rn <= 0) continue;\n\n  const status = String(r.PaymentStatus || '').toUpperCase();\n  if (status === 'PAID' || status === 'REJECTED') continue; // skip finished lines\n\n  updates.push({\n    json: {\n      row_number: rn,\n      CurrentStep: 'rejected',\n      PaymentStatus: 'REJECTED',\n      Frozen: 'TRUE',\n      UpdatedAt: $now,\n    }\n  });\n}\n\nreturn updates; // IMPORTANT: array of {json:{...}} items (not arrays/strings)\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4816,
        -64
      ],
      "id": "0cfe2526-cce0-4bc7-92d8-4a32ac4b1d92",
      "name": "Build Reject Updates (cart lines)"
    },
    {
      "parameters": {
        "jsCode": "// Build UserState Reject Update (robust)\nconst refFromExtract = $items('Extract Admin Action(Reject)')[0]?.json?.ref || '';\nreturn [{\n  json: {\n    chat_id: $json.chat_id,\n    CurrentStep: 'rejected',\n    PaymentStatus: 'REJECTED',\n    LastOrderNumber: refFromExtract,\n    CartFrozen: 'TRUE',\n    UpdatedAt: new Date().toISOString(),\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4352,
        -608
      ],
      "id": "a68ce493-e59d-4e89-b504-841584a3809f",
      "name": "Build UserState Reject Update"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "OrderNumber",
              "lookupValue": "={{$items('Extract Admin Action(Reject)')[0].json.ref.trim()}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -5024,
        -64
      ],
      "id": "752adfde-bf0e-480b-91b7-28c3dc807f7b",
      "name": "GS: Read Cart (by ref) — REJECT",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -4800,
        -608
      ],
      "id": "4cddf191-ad3b-4da2-9f9e-b89e97dd71af",
      "name": "GS: Read UserStates (by chat_id)2",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1157785025,
          "mode": "list",
          "cachedResultName": "Cart",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1157785025"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "row_number": "={{ $json.row_number }}",
            "Frozen": "={{ $json.Frozen }}",
            "CurrentStep": "={{ $json.CurrentStep }}",
            "PaymentStatus": "={{ $json.PaymentStatus }}",
            "UpdatedAt": "={{ $json.UpdatedAt }}"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "Timestamp",
              "displayName": "Timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineId",
              "displayName": "LineId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "SKU",
              "displayName": "SKU",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Dish",
              "displayName": "Dish",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Price",
              "displayName": "Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Quantity",
              "displayName": "Quantity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LineTotal",
              "displayName": "LineTotal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "OrderNumber",
              "displayName": "OrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Frozen",
              "displayName": "Frozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -3872,
        64
      ],
      "id": "4d23e779-4a9f-4226-9a66-cb9b79ae23ce",
      "name": "GS: Update Cart Lines1",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract Admin Action (REJECT-only)\nconst raw = String($json.data || $json.callback_data || '').trim();\nconst parts = raw.split('|');            // ADMIN|REJECT|{...}\nconst action = (parts[1] || '').toUpperCase();\nif (action !== 'REJECT') return [];      // <— ignore non-reject taps\n\nlet packed = {};\ntry { packed = JSON.parse(parts[2] || '{}'); } catch {}\n\nconst user_chat_id  = String(packed.chat_id || '');\nconst admin_chat_id = String($json.chat_id || $json.message?.chat?.id || '');\nconst message_id    = String($json.message_id || $json.message?.message_id || '');\nconst cqid          = $json.cqid || $json.callback_query_id || $json.callback_query?.id || null;\n\nreturn [{\n  json: {\n    action,\n    ref: String(packed.ref || packed.OrderNumber || ''),\n    chat_id: user_chat_id,          // <- customer\n    user_chat_id,\n    admin_chat_id,\n    message_id,\n    cqid,\n    reject_reason: packed.reason || '' // if you include a reason in the payload\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5024,
        -416
      ],
      "id": "5c82cb9b-5dc7-4753-b0bf-4079b98c2c05",
      "name": "Extract Admin Action(Reject)"
    },
    {
      "parameters": {
        "resource": "callback",
        "queryId": "={{$json.cqid || $json.callback_query_id || $json.callback_query?.id}}\n",
        "additionalFields": {
          "text": "=Rejected: {{$items('Extract Admin Action(Reject)')[0].json.ref}}"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -4576,
        -416
      ],
      "id": "7852db04-a35d-4248-97b2-71ed938e770e",
      "name": "Answer Admin Callback (spinner off)",
      "webhookId": "3e6fe68a-3dc9-4770-9009-c86fb22472d5",
      "credentials": {
        "telegramApi": {
          "id": "GWiNIWfCwEPeHIOg",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Guard: Already Reviewed?\n// Read UserStates (by chat_id) or Cart (by ref) before this guard\nconst status = ($json.PaymentStatus || '').toUpperCase(); // from state or a prior read\nif (status === 'PAID' || status === 'REJECTED') return []; // drop duplicate taps\nreturn [{ json: $json }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4800,
        -416
      ],
      "id": "37584466-7d8e-49ec-a509-7b34759adfce",
      "name": "Guard: Already Reviewed?"
    },
    {
      "parameters": {
        "jsCode": "// Reply: Contact Support\nconst chat_id = $json.chat_id;\n\nconst text = [\n  '☎️ *Contact support*',\n  'Our driver or team will call you when your order is ready.',\n  '',\n  'If it’s urgent, call: *0243 957 386*',\n  'Or reply here and we’ll assist shortly.'\n].join('\\n');\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text,\n      parse_mode: 'Markdown'\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2128,
        240
      ],
      "id": "d5d5969b-a1b5-41e4-b087-eab92d0c457b",
      "name": "Reply: Contact Support"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.payload }}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1920,
        240
      ],
      "id": "511c7263-6366-4239-8cef-78268c86321b",
      "name": "HTTP: Send (customer)"
    },
    {
      "parameters": {
        "jsCode": "// Set Pickup Context\n// Input: must contain chat_id (from Parse Callback -> Action Router -> this node)\n// Output: one item with fields to write into UserStates\nconst chat_id = String($json.chat_id || '');\nif (!chat_id) return []; // safety\n\nreturn [{\n  json: {\n    chat_id,\n    Fulfillment: 'pickup',\n    CurrentStep: 'await_phone',\n    // clear delivery-only fields\n    Address: '',\n    Zone: '',\n    DeliveryFee: '',\n    PaymentStatus: '',   // don't force to PAID/REJECTED here\n    CartFrozen: 'FALSE',\n    UpdatedAt: $now\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1600,
        -16
      ],
      "id": "ec3544a1-eb62-4106-b036-64c46847216d",
      "name": "Set Pickup Context"
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chat_id": "={{$json.chat_id}}",
            "Fulfillment": "={{ $json.Fulfillment ?? 'pickup' }}",
            "CurrentStep": "={{$json.CurrentStep}}",
            "Address": "={{ $json.Address ?? '' }}",
            "Zone": "={{ $json.Zone ?? '' }}",
            "DeliveryFee": "={{ $json.DeliveryFee ?? '' }}",
            "PaymentStatus": "={{ $json.PaymentStatus ?? '' }}",
            "CartFrozen": "={{ $json.CartFrozen ?? 'FALSE' }}",
            "UpdatedAt": "={{$now}}"
          },
          "matchingColumns": [
            "chat_id"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CartFrozen",
              "displayName": "CartFrozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1120,
        -128
      ],
      "id": "f23b0ea7-ba25-4c51-893e-37b4310ddcc4",
      "name": "GS: Update UserStates (pickup)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TG_API_BASE || 'https://api.telegram.org') }}/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.payload ?? $json) }}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -944,
        80
      ],
      "id": "626c7156-9711-4b00-9f4f-56b436142bcf",
      "name": "HTTP: Send (customer Pickup)"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "44302742-74f7-4a7b-b04a-d9a9069518b6",
              "leftValue": "={{$json.Fulfillment}}",
              "rightValue": "delivery",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1312,
        -4416
      ],
      "id": "b29e7694-a7ac-4765-8736-a5c54125d8c6",
      "name": "IF: Fulfillment is delivery?"
    },
    {
      "parameters": {
        "jsCode": "// Reply: Pickup → Ask Phone\nconst chat_id = $json.chat_id;\n\nconst text = [\n  '🏪 *Pickup selected.*',\n  'Please reply with your *phone number* (e.g., `0241234567` or `+233241234567`).'\n].join('\\n');\n\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id,\n      text,\n      parse_mode: 'Markdown',\n      reply_markup: {\n        inline_keyboard: [\n          [{ text: 'Change to Delivery', callback_data: 'FULFILL|DELIVERY' }]\n        ]\n      }\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1168,
        80
      ],
      "id": "9d6bb011-99d1-4726-9b7c-8c1ee147fe74",
      "name": "Reply: Pickup → Ask Phone"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.payload ?? $json) }}\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        640,
        -4000
      ],
      "id": "4d972d89-d5c7-4860-8758-05d5a77b0579",
      "name": "HTTP Request (sendMessage)"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -32,
        -4128
      ],
      "id": "f575de98-57d3-464e-9c8a-a78d55ae3302",
      "name": "GS: Read State (summary)",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * Attach State → Lines (checkout) — robust chat_id + frozen filter\n * Joins the single UserStates row onto each cart line so the summary can\n * see Fulfillment / Address / DeliveryFee / Phone.\n *\n * Inputs (by name – but we also fall back to $input when run alone):\n *   - GS: Read Cart (checkout)   → cart lines\n *   - GS: Read State (summary)   → all UserStates rows\n */\n\nfunction fromNode(name) {\n  try { return $items(name).map(i => i.json); }\n  catch (_) { return []; }\n}\n\n// 1) Collect inputs\nlet cartAll   = fromNode('GS: Read Cart (checkout)');\nlet statesAll = fromNode('GS: Read State (summary)');\n\n// Fallback when executing this node alone\nif (cartAll.length === 0 || statesAll.length === 0) {\n  const ins = $input.all().map(i => i.json);\n  if (cartAll.length === 0) {\n    cartAll = ins.filter(r => r && (r.SKU || r.sku || r.Dish));\n  }\n  if (statesAll.length === 0) {\n    statesAll = ins.filter(r =>\n      r && (\n        r.chat_id !== undefined || r.ChatID !== undefined ||\n        r.Fulfillment !== undefined || r.CurrentStep !== undefined ||\n        r.Address !== undefined || r.Zone !== undefined ||\n        r.DeliveryFee !== undefined || r.Phone !== undefined\n      )\n    );\n  }\n}\n\n// 2) Drop frozen lines first\nconst isFrozen = v => {\n  const t = String(v ?? '').trim().toLowerCase();\n  return t === 'true' || t === '1' || t === 'yes';\n};\nconst cart = cartAll.filter(r => !isFrozen(r.Frozen));\n\n// 3) Resolve chat_id AFTER filtering (and with fallbacks)\nconst chatIdCandidates = [\n  ...cart.map(r => r?.chat_id ?? r?.ChatID),\n  ...statesAll.map(s => s?.chat_id ?? s?.ChatID),\n  $json._chat_id, $json.chat_id\n].map(v => (v == null ? '' : String(v))).filter(v => v && v !== 'empty');\n\nconst chatId = chatIdCandidates[0] || '';\n\n// 4) Pick this user's state row (or default)\nconst state = statesAll.find(s => String(s?.chat_id ?? s?.ChatID) === chatId) || {};\nconst s = {\n  chat_id: chatId,\n  Fulfillment: String(state.Fulfillment || '').toLowerCase(),\n  Address: state.Address || '',\n  Zone: state.Zone || '',\n  DeliveryFee: Number(state.DeliveryFee || 0) || 0,\n  Phone: state.Phone || ''\n};\n\n// 5) Emit one item per active cart line with state attached\nconst out = cart.map(r => ({ json: { ...r, ...s } }));\nreturn out.length ? out : [];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        -4000
      ],
      "id": "61e563fc-dc61-4619-bb94-0462a23cd2ee",
      "name": "Attach State → Lines (checkout)"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I",
          "mode": "list",
          "cachedResultName": "SefakeBot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1083285361,
          "mode": "list",
          "cachedResultName": "UserStates",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1XTREud-U1BRWVTCubTl4yvHtiTYEZ_toAIR_Bd-zE8I/edit#gid=1083285361"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Fulfillment": "={{$json.Fulfillment}}",
            "chat_id": "={{$json.chat_id}}",
            "CurrentStep": "={{$json.CurrentStep}}",
            "Address": "={{ $json.Address ?? '' }}",
            "Zone": "={{ $json.Zone ?? '' }}",
            "DeliveryFee": "={{ $json.DeliveryFee ?? '' }}",
            "UpdatedAt": "={{$now}}",
            "CartFrozen": "={{ $json.CartFrozen ?? 'FALSE' }}",
            "PaymentStatus": "={{ $json.PaymentStatus ?? '' }}"
          },
          "matchingColumns": [
            "chat_id"
          ],
          "schema": [
            {
              "id": "chat_id",
              "displayName": "chat_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "CurrentStep",
              "displayName": "CurrentStep",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fulfillment",
              "displayName": "Fulfillment",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Address",
              "displayName": "Address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Zone",
              "displayName": "Zone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "DeliveryFee",
              "displayName": "DeliveryFee",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderNumber",
              "displayName": "LastOrderNumber",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "LastOrderUID",
              "displayName": "LastOrderUID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "UpdatedAt",
              "displayName": "UpdatedAt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "CartFrozen",
              "displayName": "CartFrozen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "PaymentStatus",
              "displayName": "PaymentStatus",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -1344,
        -128
      ],
      "id": "cfb48a61-b501-406c-8b9e-2ac7a2468747",
      "name": "Append or update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "qyz1Kgw8ebM5gqPx",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "45214722-c7c0-43a3-8eaa-7acdf8dff641",
              "leftValue": "={{ Array.isArray($json.lines) && $json.lines.length > 0 }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4128,
        -2128
      ],
      "id": "8c633d40-75ab-42db-a299-0cdb5fab4d6d",
      "name": "If: any lines?"
    },
    {
      "parameters": {
        "jsCode": "const price = Number($json.Price || 0);\nconst current = Number($json.Quantity || 0);\nconst qty = current + 1;\n\nreturn [{\n  json: {\n    ...$json,\n    Quantity: qty,\n    LineTotal: qty * price\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -800,
        -3280
      ],
      "id": "b7bd1911-b0d0-4bac-b079-1801774ee04b",
      "name": "Bump Qty"
    },
    {
      "parameters": {
        "jsCode": "const frozen = String($json.Frozen ?? '').toLowerCase() === 'true';\nconst paid   = String($json.PaymentStatus ?? '').toUpperCase() === 'PAID';\nconst hasOrderNo = String($json.OrderNumber ?? '').trim() !== '';\n\n/**\n * Drop the item if it's a paid/frozen line or already has an order number.\n * Returning [] in n8n means “don’t pass this item forward”.\n */\nif (frozen || paid || hasOrderNo) {\n  return [];\n}\nreturn [$json];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1696,
        -2960
      ],
      "id": "40f9039e-93be-4995-ada8-deab9b72be95",
      "name": "guard IF – invalid syntax"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ba06264c-97cd-4f9f-b9f7-2f05d04b6a95",
              "leftValue": "={{$json.CurrentStep}}",
              "rightValue": "await_addr",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2272,
        -4128
      ],
      "id": "43668110-25f5-4f9f-b94e-721917c2712e",
      "name": "IF: Awaiting ADDRESS",
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "28b78a75-a587-4c8a-ad9c-de5933815c88",
              "leftValue": "={{$json.CurrentStep}}",
              "rightValue": "await_phone",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2528,
        -4144
      ],
      "id": "e4e245a7-9c30-44c8-a544-a79de2cb8878",
      "name": "IF: Awaiting PHONE"
    },
    {
      "parameters": {
        "jsCode": "// Cart lines from the combine gate\nconst cartItems = $input.all();\n\n// Meta from Ensure Order Number (now guaranteed executed)\nlet meta = {};\ntry { meta = ($items('Ensure Order Number')[0]?.json) || {}; }\ncatch { meta = ($node['Ensure Order Number']?.json) || {}; }\n\nconst out = cartItems.map(i => {\n  const j = { ...i.json };\n  if (meta.OrderNumber) j.OrderNumber = meta.OrderNumber;\n  if (meta.OrderUID)    j.OrderUID    = meta.OrderUID;\n  if (meta.Zone !== undefined)        j.Zone        = meta.Zone;\n  if (meta.DeliveryFee !== undefined) j.DeliveryFee = Number(meta.DeliveryFee);\n  return { json: j };\n});\n\nreturn out; // array\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -896,
        -672
      ],
      "id": "53e33546-d942-4f80-a049-396b5db17da4",
      "name": "Join: Cart + OrderNo1"
    },
    {
      "parameters": {
        "jsCode": "// Fan-out each order line that is not already PAID.\n// Input: one aggregated item with { lines: [...] }.\nconst all = $input.all();\nif (!all.length) return [];\n\nconst agg = (all[0].json || {});\nconst lines = Array.isArray(agg.lines) ? agg.lines : [];\n\n// Idempotency: skip rows already marked PAID\nconst toUpdate = lines.filter(l =>\n  String(l.PaymentStatus || '').toUpperCase() !== 'PAID'\n);\n\n// Emit one minimal item per line for the Sheets update\nreturn toUpdate.map(l => ({\n  json: {\n    row_number: Number(l.row_number),\n    CurrentStep: 'paid',\n    PaymentStatus: 'PAID',\n  },\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3264,
        -784
      ],
      "id": "a4d83f6f-6f1f-42c6-97bc-9d95d6a6cf92",
      "name": "Prepare Line Updates (approve)"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "562fcb62-1bcf-4c85-9e10-caf502ece7c2",
              "leftValue": "={{ $items(\"Build Reject Updates (cart lines)\").length > 0 }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4640,
        -144
      ],
      "id": "e33fbe40-1729-451a-887a-3767be17d0a8",
      "name": "IF: Has Rejectable Lines?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "63d56fc1-f481-4999-b89f-af1ef4207e6e",
              "leftValue": "={{\n  ($json.is_callback !== true) &&\n  /^\\/?(start|menu|hi|hello)$/i.test(($json.text || '').trim())\n    ? true\n    : false\n}}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4640,
        -2944
      ],
      "id": "c842ee72-9bc8-42ff-9ae9-bc16b1f06060",
      "name": "IF: Is Greeting?"
    },
    {
      "parameters": {
        "jsCode": "const brand = $env.BRAND_NAME || 'Sefake Kitchen';\nconst momo  = $env.MOMO_NUMBER || '';\n\nconst lines = [\n  `👋 Welcome to *${brand}*!`,\n  `Order delicious meals via Telegram.`,\n  ``,\n  `• Tap *Menu* to start an order`,\n  `• Already have a cart? Tap *Checkout*`,\n  ...(momo ? [`• MoMo: ${momo}`] : []),\n];\n\nconst text = lines.join('\\n');\nconst out = [];\n\nfor (const it of $input.all()) {\n  const j = it.json || {};\n  const chat_id = j.chat_id;\n\n  const reply_markup = {\n    inline_keyboard: [\n      [{ text: '📖 Menu',     callback_data: 'MENU|OPEN' }],\n      [{ text: '🧾 Checkout', callback_data: 'CART|CHECKOUT' }]\n    ]\n  };\n\n  out.push({\n    json: {\n      method: 'sendMessage',\n      payload: {\n        chat_id,\n        text,\n        parse_mode: 'Markdown',\n        disable_web_page_preview: true,\n        reply_markup\n      }\n    }\n  });\n}\n\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4128,
        -3008
      ],
      "id": "e5550017-6297-413b-8d4e-56d77dcf8ea1",
      "name": "Build Greeting"
    },
    {
      "parameters": {
        "jsCode": "// ====== Config via env (safe defaults) ======\nconst OPEN_HHMM  = $env.OPEN_HHMM   || '09:00';                 // 24h\nconst CLOSE_HHMM = $env.CLOSE_HHMM  || '21:00';\nconst OPEN_DAYS  = ($env.OPEN_DAYS  || 'Mon,Tue,Wed,Thu,Fri,Sat')\n  .split(',')\n  .map(s => s.trim().toLowerCase());                            // ['mon', ...]\nconst TZ         = $env.TIMEZONE    || 'Africa/Accra';\nconst HOLIDAYS   = ($env.HOLIDAYS   || '')                      // '2025-12-25,2025-12-26'\n  .split(',')\n  .map(s => s.trim())\n  .filter(Boolean);\n\n// ====== Helpers ======\nfunction inWindow(now, open, close) {\n  // open/close format 'HH:MM'\n  const [oh, om] = open.split(':').map(Number);\n  const [ch, cm] = close.split(':').map(Number);\n  const start = new Date(now); start.setHours(oh, om, 0, 0);\n  const end   = new Date(now); end.setHours(ch, cm, 0, 0);\n\n  // overnight window (e.g., 18:00–02:00):\n  if (end <= start) return (now >= start) || (now <= end);\n  return (now >= start) && (now <= end);\n}\n\nconst ev = $input.first()?.json ?? {};\n// current time in business TZ\nconst now = new Date(new Date().toLocaleString('en-US', { timeZone: TZ }));\nconst dayKey = now.toLocaleDateString('en-US', { weekday: 'short' }).slice(0,3).toLowerCase(); // 'mon'\nconst isHoliday  = HOLIDAYS.includes(now.toISOString().slice(0,10));\nconst isOpenDay  = OPEN_DAYS.includes(dayKey);\nconst withinTime = inWindow(now, OPEN_HHMM, CLOSE_HHMM);\n\nconst is_open = isOpenDay && withinTime && !isHoliday;\n\n// Return an item (array-of-items with a json object)\nreturn [{\n  json: {\n    ...ev,                 // keep incoming chat_id, etc.\n    is_open,\n    tz: TZ,\n    now_iso: now.toISOString(),\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5168,
        -2672
      ],
      "id": "01a0ca7e-148d-485e-bff3-fe02afb47ca2",
      "name": "Guard: Kitchen Open?"
    },
    {
      "parameters": {
        "jsCode": "// Closed message (shows hours + days)\nconst brand = $env.BRAND_NAME || 'Sefake Kitchen';\nconst OPEN  = $env.OPEN_HHMM  || '09:00';\nconst CLOSE = $env.CLOSE_HHMM || '20:00';\nconst DAYS  = ($env.OPEN_DAYS || 'Mon,Tue,Wed,Thu,Fri,Sat').split(',').map(s => s.trim()).join(', ');\n\n// Message body\nconst lines = [\n  `⏳ *${brand}* is currently *closed*.`,\n  `🕒 *Hours:* ${OPEN}–${CLOSE}`,\n  `📅 *Days:* ${DAYS}`,\n  '',\n  `You can still browse the menu. If you’ve already paid, tap *I have paid* in your earlier message.`,\n];\n\nconst text = lines.join('\\n');\n\n// Buttons: safe actions while closed\nconst reply_markup = {\n  inline_keyboard: [\n    [{ text: '📖 View menu',     callback_data: 'MENU|OPEN' }],\n    [{ text: '🧾 Go to checkout', callback_data: 'CART|CHECKOUT' }],\n  ]\n};\n\n// Emit Telegram payload expected by your HTTP node\nreturn [{\n  json: {\n    method: 'sendMessage',\n    payload: {\n      chat_id: $json.chat_id,\n      text,\n      parse_mode: 'Markdown',\n      reply_markup,\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4592,
        -2592
      ],
      "id": "92701486-3f48-4e7e-b49f-f48f5dac2e79",
      "name": "Build Closed Message"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json.payload}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3712,
        -3056
      ],
      "id": "29a18d30-6d7d-4b9a-83b3-4fcb7e3a13fb",
      "name": "HTTP Send → Customer (sendMessage)"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{$env.TG_BOT_TOKEN}}/{{ $json.method || 'sendMessage' }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json.payload}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4240,
        -2592
      ],
      "id": "b7c4e0be-5cd5-4b23-9059-34f1b61f7b36",
      "name": "HTTP Send → Customer (sendMessage)1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "64d9e91a-63c8-45a3-95f9-6e9c199ae228",
              "leftValue": "={{ $json.is_open === true }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4896,
        -2656
      ],
      "id": "88c2ff9e-71d2-4447-b579-eb87ea9ea024",
      "name": "IF: Kitchen is open?"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Ensure Cart Rows (approve) — single-output\n * IN: items from \"GS: Read Cart (by ref) — APPROVE\"\n * OUT: \n *  - if rows exist -> each row wrapped as { json: {...} }\n *  - if none      -> ONE control item { json: { _notify_admin: true, ref, text } }\n */\nfunction n(v){const x=Number(v);return Number.isFinite(x)?x:NaN;}\n\nconst rows = $input.all()\n  .map(i => (i && i.json) ? i.json : {})\n  .filter(r => Number.isFinite(n(r.row_number)) && n(r.row_number) > 0);\n\n// Best-effort ref for message (from input rows)\nconst ref = String(rows[0]?.OrderNumber || '').trim();\n\nif (rows.length === 0) {\n  return [{\n    json: {\n      _notify_admin: true,\n      ref,\n      text: ref \n        ? `⚠️ No cart lines found for ref ${ref}. Nothing to approve.`\n        : `⚠️ No cart lines found. Nothing to approve.`,\n    }\n  }];\n}\n\n// pass-through: one item PER cart row, correctly wrapped\nreturn rows.map(r => ({ json: r }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4896,
        -976
      ],
      "id": "7493cb57-2f28-4506-822d-5b3549b947b1",
      "name": "Ensure Cart Rows (approve)",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a1a3a4bf-8979-42d8-becc-2b2e19510584",
              "leftValue": "={{ $json._notify_admin === true }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4672,
        -880
      ],
      "id": "164e1257-16e7-4a0a-9bdb-79179047006b",
      "name": "IF: “_notify_admin present?”"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ ($env.TELEGRAM_API_BASE || 'https://api.telegram.org') + '/bot' + $env.TELEGRAM_BOT_TOKEN + '/' + ($json.method || 'sendMessage') }}\n",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ \n  $json.payload \n  ? $json.payload  // allow upstream code to pass a full payload\n  : {\n      chat_id: $json.chat_id || $env.TELEGRAM_ADMIN_CHAT_ID,\n      text: $json.text || '✅ Done.',\n      parse_mode: 'Markdown',\n      disable_web_page_preview: true,\n      ...( $env.ADMIN_TOPIC_ID ? { message_thread_id: Number($env.ADMIN_TOPIC_ID) } : {} )\n    }\n}}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4320,
        -1008
      ],
      "id": "a8caaea9-f1a9-4c1d-8f10-60272fbee8e2",
      "name": "HTTP Send → Customer Paid1"
    }
  ],
  "pinData": {
    "Telegram Trigger": [
      {
        "json": {
          "update_id": 933423230,
          "callback_query": {
            "id": "4924864820855744658",
            "from": {
              "id": 5441626742,
              "is_bot": false,
              "first_name": "Jon",
              "username": "Joni841",
              "language_code": "en"
            },
            "message": {
              "message_id": 2672,
              "from": {
                "id": 8293686289,
                "is_bot": true,
                "first_name": "Sefake Kitchen",
                "username": "SefakeKitchenBot"
              },
              "chat": {
                "id": 5441626742,
                "first_name": "Jon",
                "username": "Joni841",
                "type": "private"
              },
              "date": 1758897696,
              "text": "🧺 Your Cart                            \n\n• Waakye Set x1 — ₵65.00                \n\nFulfillment: — choose delivery or pickup below —\n\nSubtotal: ₵65.00                        \nDelivery fee: ₵0.00                     \nTotal: ₵65.00                           ",
              "entities": [
                {
                  "offset": 3,
                  "length": 9,
                  "type": "bold"
                },
                {
                  "offset": 84,
                  "length": 12,
                  "type": "bold"
                },
                {
                  "offset": 134,
                  "length": 9,
                  "type": "bold"
                },
                {
                  "offset": 175,
                  "length": 13,
                  "type": "bold"
                },
                {
                  "offset": 216,
                  "length": 6,
                  "type": "bold"
                }
              ],
              "reply_markup": {
                "inline_keyboard": [
                  [
                    {
                      "text": "🚚 Delivery",
                      "callback_data": "FULFILL|DELIVERY"
                    },
                    {
                      "text": "🏪 Pickup",
                      "callback_data": "FULFILL|PICKUP"
                    }
                  ],
                  [
                    {
                      "text": "🧹 Clear",
                      "callback_data": "CART|CLEAR"
                    },
                    {
                      "text": "🍽️ Continue Shopping",
                      "callback_data": "MENU|REFRESH"
                    }
                  ]
                ]
              }
            },
            "chat_instance": "-5632903552296079870",
            "data": "FULFILL|PICKUP"
          }
        }
      }
    ]
  },
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Normalize Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Event": {
      "main": [
        [
          {
            "node": "Build Customer Upsert",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read State",
            "type": "main",
            "index": 0
          },
          {
            "node": "Parse Callback",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read State (phone)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Customer Upsert": {
      "main": [
        [
          {
            "node": "GS: Read Customer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Customer": {
      "main": [
        [
          {
            "node": "Find Customer Row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Customer Row": {
      "main": [
        [
          {
            "node": "IF Customer Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Customer Exists?": {
      "main": [
        [
          {
            "node": "Update Customer",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append Customer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read State": {
      "main": [
        [
          {
            "node": "Guard: Skip Channel IDs4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find/Init State": {
      "main": [
        [
          {
            "node": "IF State Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF State Exists?": {
      "main": [
        [],
        [
          {
            "node": "Guard: Skip Channel IDs3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Callback": {
      "main": [
        [
          {
            "node": "PAY|CONFIRM?",
            "type": "main",
            "index": 0
          },
          {
            "node": "ADMIN?",
            "type": "main",
            "index": 0
          },
          {
            "node": "IF: Is Greeting?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Guard: Kitchen Open?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Action Router": {
      "main": [
        [
          {
            "node": "GS: Read Menu",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read Menu",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read State (phone)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read Menu (add)",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read Cart (add)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Ack? (safe)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read Cart (view)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read Cart (clear)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read Cart (checkout)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read Menu(details)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ack? (safe)1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Pickup Context",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ack? (safe)2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ack? (safe)3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ack?(safe)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Default Menu Page",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read Cart (clear)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Reply: Contact Support",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Menu": {
      "main": [
        [
          {
            "node": "Build Menu Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Menu Reply": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Menu Page": {
      "main": [
        [
          {
            "node": "GS: Read Menu",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Dish Details": {
      "main": [
        [
          {
            "node": "HTTP Request (details)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Menu(details)": {
      "main": [
        [
          {
            "node": "Build Dish Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pick Menu Item (by SKU)": {
      "main": [
        [
          {
            "node": "guard IF – invalid syntax",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Existing Cart Line": {
      "main": [
        [
          {
            "node": "IF Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Exists?": {
      "main": [
        [
          {
            "node": "Bump Qty",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Append Cart Line",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Append Cart Line": {
      "main": [
        [
          {
            "node": "IF Has Dupes?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Cart Summary": {
      "main": [
        [
          {
            "node": "Send Cart",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Cart (view)": {
      "main": [
        [
          {
            "node": "Build Cart Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Cart (clear)": {
      "main": [
        [
          {
            "node": "Collect Rows To Delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect Rows To Delete": {
      "main": [
        [
          {
            "node": "IF Nothing To Delete?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Nothing To Delete?": {
      "main": [
        [
          {
            "node": "Carry Chat (clear)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split In Batches (1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches (1)": {
      "main": [
        [
          {
            "node": "Carry Chat (clear)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Delete Row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Delete Row": {
      "main": [
        [
          {
            "node": "Split In Batches (1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Menu (add)": {
      "main": [
        [
          {
            "node": "Pick Menu Item (by SKU)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Has Dupes?": {
      "main": [
        [
          {
            "node": "Make Dupe Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "GS: Delete Row (Row Number = {{$json.row_number}})",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Make Dupe Items": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Delete Row (Row Number = {{$json.row_number}})": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Carry Chat (clear)": {
      "main": [
        [
          {
            "node": "Send Cleared",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Checkout Summary": {
      "main": [
        [
          {
            "node": "HTTP Request (sendMessage)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Cart (checkout)": {
      "main": [
        [
          {
            "node": "Attach State → Lines (checkout)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read State(delivery)": {
      "main": [
        [
          {
            "node": "Has State?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ack? (safe)": {
      "main": [
        [
          {
            "node": "Ack Added",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read State (phone)": {
      "main": [
        [
          {
            "node": "IF: Awaiting PHONE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Needs Phone?": {
      "main": [
        [
          {
            "node": "Validate Ghana Phone",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Ghana Phone": {
      "main": [
        [
          {
            "node": "IF — is phone valid?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF — is phone valid?": {
      "main": [
        [
          {
            "node": "GS: Save Phone",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Reply: Invalid Phone",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply: Invalid Phone": {
      "main": [
        [
          {
            "node": "HTTP: Send Invalid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Send Invalid": {
      "main": [
        [
          {
            "node": "GS: Keep Await Phone",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Save Phone": {
      "main": [
        [
          {
            "node": "IF: Fulfillment is delivery?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply: Ask Address": {
      "main": [
        [
          {
            "node": "HTTP: Send Ask Address",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Delivery Context": {
      "main": [
        [
          {
            "node": "GS: Update State (delivery)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ask For Phone": {
      "main": [
        [
          {
            "node": "HTTP: Send Ask Phone",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ack? (safe)1": {
      "main": [
        [
          {
            "node": "GS: Read State(delivery)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Has State?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has State?": {
      "main": [
        [
          {
            "node": "IF State Exists?3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF State Exists?3": {
      "main": [
        [
          {
            "node": "Set Delivery Context",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Delivery Context (create)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ask For Phone1": {
      "main": [
        [
          {
            "node": "HTTP: Send Ask Phone1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Append State (delivery)1": {
      "main": [
        [
          {
            "node": "Ask For Phone1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Delivery Context (create)": {
      "main": [
        [
          {
            "node": "GS: Append State (delivery)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Needs Address?": {
      "main": [
        [
          {
            "node": "Find Zone",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read Zones",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Zone": {
      "main": [
        [
          {
            "node": "IF Zone Found?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Zone Found?": {
      "main": [
        [
          {
            "node": "GS: Update State (address)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Reply: Zone Not Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Update State (address)": {
      "main": [
        [
          {
            "node": "Reply: Address OK",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply: Address OK": {
      "main": [
        [
          {
            "node": "HTTP: Send Address OK",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply: Zone Not Found": {
      "main": [
        [
          {
            "node": "HTTP: Send Zone Not Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Update State (delivery)1": {
      "main": [
        [
          {
            "node": "Ask For Phone",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Await Address (code)": {
      "main": [
        [
          {
            "node": "Update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ack? (safe)2": {
      "main": [
        [
          {
            "node": "Set Await Address (code)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update row in sheet": {
      "main": [
        [
          {
            "node": "Reply: Ask Address",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ack? (safe)3": {
      "main": [
        [
          {
            "node": "GS: Read Cart",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read State1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Cart": {
      "main": [
        [
          {
            "node": "filter Cart",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter Cart": {
      "main": [
        [
          {
            "node": "Join: Cart+State",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Checkout Summary (code)": {
      "main": [
        [
          {
            "node": "HTTP: Send Checkout Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read State1": {
      "main": [
        [
          {
            "node": "Join: Cart+State",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Join: Cart+State": {
      "main": [
        [
          {
            "node": "Build Checkout Summary (code)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ack?(safe)": {
      "main": [
        [
          {
            "node": "GS: Read Cart1",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read State (UserStates)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Cart1": {
      "main": [
        [
          {
            "node": "filter Cart (qty>0)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read State (UserStates)": {
      "main": [
        [
          {
            "node": "Ensure Order Number",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Line Updates": {
      "main": [
        [
          {
            "node": "GS: Update Lines (Orders)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Payment Instructions": {
      "main": [
        [
          {
            "node": "HTTP: Send Payment Instructions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ensure Order Number": {
      "main": [
        [
          {
            "node": "Join: PayCard Inputs",
            "type": "main",
            "index": 1
          },
          {
            "node": "Join: Cart + OrderNo",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "filter Cart (qty>0)": {
      "main": [
        [
          {
            "node": "Join: Cart + OrderNo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Join: Cart + OrderNo": {
      "main": [
        [
          {
            "node": "Join: Cart + OrderNo1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Join: PayCard Inputs": {
      "main": [
        [
          {
            "node": "Build Payment Instructions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PAY|CONFIRM?": {
      "main": [
        [
          {
            "node": "Extract PAY|CONFIRM Ref",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PAY|CONFIRM Ref": {
      "main": [
        [
          {
            "node": "Answer Callback (immediate)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Build Customer Processing Message",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read Cart (by ref) — REVIEW",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply: Ref Not Found": {
      "main": [
        [
          {
            "node": "HTTP Send → CUSTOMER Ref Not Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Customer Processing Message": {
      "main": [
        [
          {
            "node": "HTTP Send → Customer Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: OrderNumber matches ref (IF)": {
      "main": [
        [
          {
            "node": "Aggregate Lines & Totals",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Lines & Totals": {
      "main": [
        [
          {
            "node": "If: any lines?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Orders (by ref)": {
      "main": [
        [
          {
            "node": "IF: Has Order row?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Freeze Updates": {
      "main": [
        [
          {
            "node": "GS: Update Cart Lines",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Has Order row?": {
      "main": [
        [
          {
            "node": "Attach Delivery Fee",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Reply: Ref Not Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Kitchen Message": {
      "main": [
        [
          {
            "node": "HTTP Send → Kitchen Paid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Attach Delivery Fee": {
      "main": [
        [
          {
            "node": "Build Admin Review Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Customer Ack": {
      "main": [
        [
          {
            "node": "HTTP Send → Customer Paid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ADMIN?": {
      "main": [
        [
          {
            "node": "Extract Admin Action",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract Admin Action(Reject)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Admin Action": {
      "main": [
        [
          {
            "node": "Answer Admin Callback",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read Cart (by ref) — APPROVE",
            "type": "main",
            "index": 0
          },
          {
            "node": "Guard: Already Paid?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Guard: Skip Channel IDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Answer Admin Callback": {
      "main": [
        [
          {
            "node": "HTTP: Telegram Send",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Admin Review Message": {
      "main": [
        [
          {
            "node": "HTTP Send → Admin Review",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notify Customer (rejected)": {
      "main": [
        [
          {
            "node": "HTTP Send → Customer Reject",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guard: Already Paid?": {
      "main": [
        [
          {
            "node": "Build Freeze Updates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read UserStates (by chat_id)": {
      "main": [
        [
          {
            "node": "Guard: Already Paid?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Cart (by ref) — REVIEW": {
      "main": [
        [
          {
            "node": "IF: OrderNumber matches ref (IF)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Cart (by ref) — APPROVE": {
      "main": [
        [
          {
            "node": "Ensure Cart Rows (approve)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guard: Skip Channel IDs": {
      "main": [
        [
          {
            "node": "GS: Read UserStates (by chat_id)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guard: Skip Channel IDs1": {
      "main": [
        [
          {
            "node": "GS: Update UserStates (mark paid)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guard: Skip Channel IDs2": {
      "main": [
        [
          {
            "node": "Build UserState Reject Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guard: Skip Channel IDs3": {
      "main": [
        [
          {
            "node": "Append State",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guard: Skip Channel IDs4": {
      "main": [
        [
          {
            "node": "Find/Init State",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Lines & Totals — APPROVE": {
      "main": [
        [
          {
            "node": "GS: Read Orders (by ref)-Approve",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge (agg + order)",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "GS: Read Orders (by ref)-Approve": {
      "main": [
        [
          {
            "node": "Merge (agg + order)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Attach Delivery Fee — APPROVE": {
      "main": [
        [
          {
            "node": "Build Customer Ack",
            "type": "main",
            "index": 0
          },
          {
            "node": "Build Kitchen Message",
            "type": "main",
            "index": 0
          },
          {
            "node": "Guard: Skip Channel IDs1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare Line Updates (approve)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge (agg + order)": {
      "main": [
        [
          {
            "node": "Attach Delivery Fee — APPROVE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Reject Updates (cart lines)": {
      "main": [
        [
          {
            "node": "GS: Update Cart Lines1",
            "type": "main",
            "index": 0
          },
          {
            "node": "IF: Has Rejectable Lines?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build UserState Reject Update": {
      "main": [
        [
          {
            "node": "GS: Update UserStates (reject)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read Cart (by ref) — REJECT": {
      "main": [
        [
          {
            "node": "Build Reject Updates (cart lines)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read UserStates (by chat_id)2": {
      "main": [
        [
          {
            "node": "Guard: Skip Channel IDs2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Admin Action(Reject)": {
      "main": [
        [
          {
            "node": "GS: Read UserStates (by chat_id)2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Guard: Already Reviewed?",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read Cart (by ref) — REJECT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guard: Already Reviewed?": {
      "main": [
        [
          {
            "node": "Answer Admin Callback (spinner off)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply: Contact Support": {
      "main": [
        [
          {
            "node": "HTTP: Send (customer)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Pickup Context": {
      "main": [
        [
          {
            "node": "Reply: Pickup → Ask Phone",
            "type": "main",
            "index": 0
          },
          {
            "node": "Append or update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Fulfillment is delivery?": {
      "main": [
        [
          {
            "node": "Reply: Ask Address",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GS: Read State (summary)",
            "type": "main",
            "index": 0
          },
          {
            "node": "GS: Read Cart (checkout)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reply: Pickup → Ask Phone": {
      "main": [
        [
          {
            "node": "HTTP: Send (customer Pickup)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GS: Read State (summary)": {
      "main": [
        [
          {
            "node": "Attach State → Lines (checkout)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Attach State → Lines (checkout)": {
      "main": [
        [
          {
            "node": "Build Checkout Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append or update row in sheet": {
      "main": [
        [
          {
            "node": "GS: Update UserStates (pickup)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If: any lines?": {
      "main": [
        [
          {
            "node": "GS: Read Orders (by ref)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Reply: Ref Not Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Bump Qty": {
      "main": [
        [
          {
            "node": "GS: Update Cart Line",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "guard IF – invalid syntax": {
      "main": [
        [
          {
            "node": "Find Existing Cart Line",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Awaiting PHONE": {
      "main": [
        [
          {
            "node": "Needs Phone?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "IF: Awaiting ADDRESS",
            "type": "main",
            "index": 0
          },
          {
            "node": "Needs Address?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Join: Cart + OrderNo1": {
      "main": [
        [
          {
            "node": "GS: Update State (await_payment + LastOrderNumber)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare Line Updates",
            "type": "main",
            "index": 0
          },
          {
            "node": "Join: PayCard Inputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Line Updates (approve)": {
      "main": [
        [
          {
            "node": "GS: Update Orders (mark paid)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Has Rejectable Lines?": {
      "main": [
        [
          {
            "node": "Notify Customer (rejected)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Is Greeting?": {
      "main": [
        [
          {
            "node": "Action Router",
            "type": "main",
            "index": 0
          },
          {
            "node": "Build Greeting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guard: Kitchen Open?": {
      "main": [
        [
          {
            "node": "IF: Kitchen is open?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Greeting": {
      "main": [
        [
          {
            "node": "HTTP Send → Customer (sendMessage)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Closed Message": {
      "main": [
        [
          {
            "node": "HTTP Send → Customer (sendMessage)1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Kitchen is open?": {
      "main": [
        [
          {
            "node": "Action Router",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Build Closed Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ensure Cart Rows (approve)": {
      "main": [
        [
          {
            "node": "Build Freeze Updates",
            "type": "main",
            "index": 0
          },
          {
            "node": "IF: “_notify_admin present?”",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: “_notify_admin present?”": {
      "main": [
        [
          {
            "node": "HTTP Send → Customer Paid1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Aggregate Lines & Totals — APPROVE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF: Awaiting ADDRESS": {
      "main": [
        [
          {
            "node": "Needs Address?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ef668aac-eb2e-44c0-9c2e-c0c9cfcb50ad",
  "meta": {
    "instanceId": "9406bb58f60cf25428813fd7e451d41fa5e249d5d2f9c82aadc7e882245c5c23"
  },
  "id": "b0JUKeFNaATaJ0bF",
  "tags": []
}